/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * WorkAreaJPanel.java
 *
 * Created on May 17, 2020, 8:35:29 AM
 */
package UserInterface.WorkAreas.StudentRole;

import Business.Business;
import Business.Course.Course;
import Business.Course.CourseOffering;
import Business.Person.Student;
import Business.Profiles.StudentProfile;
import Business.UserAccounts.UserAccount;
import java.awt.CardLayout;
import java.awt.List;
import static java.time.Clock.system;
import static java.time.InstantSource.system;
import java.util.ArrayList;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author kal
 */
public class StudentCourseRegistrationJPanel extends javax.swing.JPanel {

    private javax.swing.JPanel CardSequencePanel;
    private Business business;
    private StudentProfile studentAccount;
    private Student student;
    

    /**
     * Creates new form UnitRiskWorkArea
     * @param b
     * @param spp
     * @param clp
     */

    public StudentCourseRegistrationJPanel(Business b, StudentProfile spp, JPanel clp) {

        this.business = b;
        this.CardSequencePanel = clp;
        this.studentAccount = spp;
        this.student=(Student) spp.getStudent();
  
        
        initComponents();
        refreshSemester();
        refreshBalance();
        populateCourseTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        btnSearchByID = new javax.swing.JButton();
        btnSearchByTeacher = new javax.swing.JButton();
        btnSearchByTerm = new javax.swing.JButton();
        fieldSearchByID = new javax.swing.JTextField();
        fieldSearchByTeacher = new javax.swing.JTextField();
        cmbSearchByTerm = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSearch = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        btnRegister = new javax.swing.JButton();
        btnDrop = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        lblBalance = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableEnrolled = new javax.swing.JTable();

        setForeground(new java.awt.Color(51, 51, 51));

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel1.setText("Registration");

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnSearchByID.setText("Search by Course ID");
        btnSearchByID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchByIDActionPerformed(evt);
            }
        });

        btnSearchByTeacher.setText("Search by Teacher");
        btnSearchByTeacher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchByTeacherActionPerformed(evt);
            }
        });

        btnSearchByTerm.setText("Search by Term");
        btnSearchByTerm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchByTermActionPerformed(evt);
            }
        });

        tblSearch.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Course ID", "Course Name", "Teacher", "Credits", "Semester", "Tuition", "Title 7", "null", "null"
            }
        ));
        jScrollPane1.setViewportView(tblSearch);
        if (tblSearch.getColumnModel().getColumnCount() > 0) {
            tblSearch.getColumnModel().getColumn(6).setMinWidth(0);
            tblSearch.getColumnModel().getColumn(6).setPreferredWidth(0);
            tblSearch.getColumnModel().getColumn(6).setMaxWidth(0);
            tblSearch.getColumnModel().getColumn(7).setMinWidth(0);
            tblSearch.getColumnModel().getColumn(7).setPreferredWidth(0);
            tblSearch.getColumnModel().getColumn(7).setMaxWidth(0);
            tblSearch.getColumnModel().getColumn(8).setMinWidth(0);
            tblSearch.getColumnModel().getColumn(8).setPreferredWidth(0);
            tblSearch.getColumnModel().getColumn(8).setMaxWidth(0);
        }

        jLabel2.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14)); // NOI18N
        jLabel2.setText("Enrolled Course");

        btnRegister.setText("Enrolled");
        btnRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterActionPerformed(evt);
            }
        });

        btnDrop.setText("Drop");
        btnDrop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDropActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 14)); // NOI18N
        jLabel3.setText("Balance:");

        lblBalance.setText("0.00");

        TableEnrolled.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Course ID", "Course Name", "Teacher", "Credits", "Semester", "Tuition", "Title 7"
            }
        ));
        jScrollPane3.setViewportView(TableEnrolled);
        if (TableEnrolled.getColumnModel().getColumnCount() > 0) {
            TableEnrolled.getColumnModel().getColumn(6).setMinWidth(0);
            TableEnrolled.getColumnModel().getColumn(6).setPreferredWidth(0);
            TableEnrolled.getColumnModel().getColumn(6).setMaxWidth(0);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(btnBack)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDrop, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSearchByID)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(fieldSearchByID, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(55, 55, 55)
                        .addComponent(btnSearchByTeacher)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fieldSearchByTeacher, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55)
                        .addComponent(btnSearchByTerm)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbSearchByTerm, 0, 126, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 716, Short.MAX_VALUE)
                        .addComponent(btnRegister))
                    .addComponent(jScrollPane3))
                .addContainerGap(140, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearchByID)
                    .addComponent(btnSearchByTeacher)
                    .addComponent(btnSearchByTerm)
                    .addComponent(fieldSearchByID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldSearchByTeacher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbSearchByTerm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRegister))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDrop)
                    .addComponent(jLabel3)
                    .addComponent(lblBalance))
                .addGap(38, 38, 38)
                .addComponent(btnBack)
                .addGap(15, 15, 15))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        CardSequencePanel.remove(this);
        CardLayout layout = (CardLayout)CardSequencePanel.getLayout();
        layout.previous(CardSequencePanel);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnSearchByIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchByIDActionPerformed
        // TODO add your handling code here:
        String q = fieldSearchByID.getText().trim();
        if (q.isEmpty()) {
            showError("Please enter a teacher's name.");
            resetTable();
            return;
        }
        System.out.println(q);
        ArrayList<CourseOffering> r = business.getCourseDirectory().findOfferingById(q);
        System.out.println(r.get(0).getCourse().getCourseId());
        if (r.isEmpty()) {
            showError("No courses found for that Course ID.");
            resetTable();
        } else {
            populateCourseSearchTable(r);
        }
    }//GEN-LAST:event_btnSearchByIDActionPerformed

    private void btnSearchByTermActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchByTermActionPerformed
        // TODO add your handling code here:
        String q = (String)cmbSearchByTerm.getSelectedItem();
        ArrayList<CourseOffering> r = business.getCourseDirectory().findBySemester(q);
        populateCourseSearchTable(r);
    }//GEN-LAST:event_btnSearchByTermActionPerformed

    private void btnSearchByTeacherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchByTeacherActionPerformed
        // TODO add your handling code here:
        String q = fieldSearchByTeacher.getText().trim();
        if (q.isEmpty()) {
            showError("Please enter a teacher's name.");
            resetTable();
            return;
        }
       ArrayList<CourseOffering> r = business.getCourseDirectory().findByFacultyName(q);
       
       populateCourseSearchTable(r);
        if (r.isEmpty()) {
            showError("No courses found for that teacher.");
            resetTable();
        } else {
            populateCourseSearchTable(r);
        }
      
    }//GEN-LAST:event_btnSearchByTeacherActionPerformed

    private void btnRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterActionPerformed
        // TODO add your handling code here:
         try {
            int row = tblSearch.getSelectedRow();
            System.out.println(row);
            
            if (row < 0) {
                JOptionPane.showMessageDialog(this, "Select a course to enroll!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            CourseOffering selectedC =(CourseOffering) tblSearch.getValueAt(row, 6);
            String result =student.enrollCourse(selectedC);
            if (!"OK".equals(result)) {
            JOptionPane.showMessageDialog(this, "❌ Enroll failed: " + result, "Error", JOptionPane.ERROR_MESSAGE);
        }
            refreshBalance();
            populateCourseTable();
            
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Unexpected error enrolling: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }       
    }//GEN-LAST:event_btnRegisterActionPerformed

    private void btnDropActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDropActionPerformed
        // TODO add your handling code here:
           try {
            int row = TableEnrolled.getSelectedRow();
            System.out.println(row);
            
            if (row < 0) {
                JOptionPane.showMessageDialog(this, "Select a course to drop!", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            CourseOffering selectedC =(CourseOffering) TableEnrolled.getValueAt(row, 6);
            String result =student.dropCourse(selectedC);
            if (!"OK".equals(result)) {
            JOptionPane.showMessageDialog(this, "❌ Drop failed: " + result, "Error", JOptionPane.ERROR_MESSAGE);
        }
            refreshBalance();
            populateCourseTable();
            
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Unexpected error enrolling: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
       }
    }//GEN-LAST:event_btnDropActionPerformed

    private void refreshSemester() {
        cmbSearchByTerm.removeAllItems();
        for (CourseOffering c : business.getCourseDirectory().getCourseOfferingList()) {
            String s = c.getSemester();
            if(!containsItem(cmbSearchByTerm,s)){
                cmbSearchByTerm.addItem(s);
            }
            }
    }
    
    private boolean containsItem(JComboBox<String> comboBox, String item) {
    for (int i = 0; i < comboBox.getItemCount(); i++) {
        if (comboBox.getItemAt(i).equals(item)) {
            return true;  
        }
    }
    return false;  
}
    
    private void populateCourseSearchTable(ArrayList<CourseOffering> list) {
        DefaultTableModel model = (DefaultTableModel) tblSearch.getModel();
        model.setRowCount(0);
        for (CourseOffering c : list) {
            model.addRow(new Object[]{
                c.getCourse().getCourseId(),
                c.getCourse().getName(),
                c.getFaculty(),
                c.getCourse().getCredits(),
                c.getSemester(),
                String.format("$%.2f", c.getTuitionForCourse()),
                c
            });
        }
    }

    private void populateCourseTable() {
        DefaultTableModel model = (DefaultTableModel) TableEnrolled.getModel();
        model.setRowCount(0);
        for (CourseOffering c : student.getEnrolledOfferings()) {
            model.addRow(new Object[]{
                c.getCourse().getCourseId(),
                c.getCourse().getName(),
                c.getFaculty(),
                c.getCourse().getCredits(),
                c.getSemester(),
                String.format("$%.2f", c.getTuitionForCourse()),
                c
            });
        }
    }
    
    private void refreshBalance(){
        System.out.println(student.getBalance());
        lblBalance.setText(String.valueOf(student.getBalance()));
    }
    
    private void showError(String message) {
        JOptionPane.showMessageDialog(null, message, "Error", JOptionPane.ERROR_MESSAGE);
    }

    private void resetTable(){
        DefaultTableModel model = (DefaultTableModel) tblSearch.getModel();
        model.setRowCount(0);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TableEnrolled;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDrop;
    private javax.swing.JButton btnRegister;
    private javax.swing.JButton btnSearchByID;
    private javax.swing.JButton btnSearchByTeacher;
    private javax.swing.JButton btnSearchByTerm;
    private javax.swing.JComboBox<String> cmbSearchByTerm;
    private javax.swing.JTextField fieldSearchByID;
    private javax.swing.JTextField fieldSearchByTeacher;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblBalance;
    private javax.swing.JTable tblSearch;
    // End of variables declaration//GEN-END:variables

}
