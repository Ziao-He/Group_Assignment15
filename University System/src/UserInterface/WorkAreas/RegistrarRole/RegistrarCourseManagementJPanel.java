/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.WorkAreas.RegistrarRole;

import Business.Business;
import Business.UserAccounts.UserAccount;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import Business.Course.Course;
import Business.Course.CourseOffering;
import Business.Course.Schedule;
import Business.Profiles.FacultyProfile;
import java.awt.CardLayout;
/**
 *
 * @author 心火牧神塞勒斯
 */
public class RegistrarCourseManagementJPanel extends javax.swing.JPanel {

    Business business;
    UserAccount useraccount;
    javax.swing.JPanel CardSequencePanel;
    private String currentEditingCourseId;
    private boolean isCreateMode = false;
    private boolean isUpdateMode = false;
    /**
     * Creates new form RegistrarCourseManagementJPanel
     */
    public RegistrarCourseManagementJPanel(Business b, JPanel clp, UserAccount ua) {
        this.business = b;
        this.CardSequencePanel = clp;
        this.useraccount = ua;
        initComponents();
        setupCourseTable();
        setupTeacherComboBox();
        setViewMode();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblCourse = new javax.swing.JTable();
        lblCourseID = new javax.swing.JLabel();
        lblCourseName = new javax.swing.JLabel();
        lblClassroom = new javax.swing.JLabel();
        txtCourseID = new javax.swing.JTextField();
        txtCourseName = new javax.swing.JTextField();
        txtClassroom = new javax.swing.JTextField();
        lblSemester = new javax.swing.JLabel();
        lblStartTime = new javax.swing.JLabel();
        lblEndTime = new javax.swing.JLabel();
        txtSemester = new javax.swing.JTextField();
        txtStartTime = new javax.swing.JTextField();
        jcbTeacher = new javax.swing.JComboBox<>();
        btnCreate = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        txtEndTime = new javax.swing.JTextField();
        lblTeacher = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        lblCredits = new javax.swing.JLabel();
        txtCredits = new javax.swing.JTextField();
        lblCapacity = new javax.swing.JLabel();
        txtCapacity = new javax.swing.JTextField();

        setBackground(new java.awt.Color(204, 204, 255));

        tblCourse.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Course ID", "Course Name", "Semester", "Classroom", "Start Time", "End Time", "Teacher"
            }
        ));
        jScrollPane1.setViewportView(tblCourse);

        lblCourseID.setText("Course ID");

        lblCourseName.setText("Course Name");

        lblClassroom.setText("ClassRoom");

        lblSemester.setText("Semester");

        lblStartTime.setText("Start Time");

        lblEndTime.setText("End Time");

        jcbTeacher.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbTeacher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbTeacherActionPerformed(evt);
            }
        });

        btnCreate.setText("Create");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        lblTeacher.setText("Teacher");

        btnBack.setText("<<<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblCredits.setText("Credits");

        lblCapacity.setText("Capacity");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCourseID, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCourseName)
                    .addComponent(lblClassroom))
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtCourseID, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                    .addComponent(txtCourseName)
                    .addComponent(txtClassroom))
                .addGap(76, 76, 76)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblSemester)
                    .addComponent(lblStartTime)
                    .addComponent(lblEndTime))
                .addGap(69, 69, 69)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(txtEndTime, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                        .addComponent(txtStartTime))
                    .addComponent(txtSemester, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTeacher)
                    .addComponent(lblCredits)
                    .addComponent(lblCapacity))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jcbTeacher, 0, 120, Short.MAX_VALUE)
                    .addComponent(txtCredits)
                    .addComponent(txtCapacity))
                .addGap(92, 92, 92))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 827, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBack))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(122, 122, 122)
                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(149, 149, 149)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCourseID)
                    .addComponent(txtCourseID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSemester)
                    .addComponent(txtSemester, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbTeacher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTeacher))
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCourseName)
                    .addComponent(txtCourseName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblStartTime)
                    .addComponent(txtStartTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCredits)
                    .addComponent(txtCredits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblClassroom)
                            .addComponent(txtClassroom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblEndTime)
                            .addComponent(txtEndTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCapacity)
                            .addComponent(txtCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreate)
                    .addComponent(btnUpdate)
                    .addComponent(btnSave))
                .addContainerGap(82, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        // TODO add your handling code here:
        setCreateMode();
        isCreateMode = true;    // 设置创建模式
        isUpdateMode = false;   // 确保更新模式关闭
        clearForm();
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        setUpdateMode();
        isCreateMode = false;   // 确保创建模式关闭
        isUpdateMode = true;    // 设置更新模式
        int selectedRow = tblCourse.getSelectedRow();
    
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "请先选择要编辑的课程", "提示", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // 获取选中行的课程ID
        DefaultTableModel model = (DefaultTableModel) tblCourse.getModel();
        String courseId = model.getValueAt(selectedRow, 0).toString();

        // 通过课程ID找到对应的课程对象获取学分
        Course course = findCourseById(courseId);
        if (course != null) {
            txtCredits.setText(String.valueOf(course.getCredits()));
            
        } else {
            txtCredits.setText(""); // 如果找不到，留空
        }
        // 通过课程ID找到对应的CourseOffering对象获取Capacity
        CourseOffering offering = findCourseOfferingById(courseId);
        if (offering != null) {
            txtCapacity.setText(String.valueOf(offering.getCapacity())); // 从CourseOffering获取Capacity
        } else {
            txtCapacity.setText(""); // 如果找不到，留空
        }

        // 将表格数据填充到表单
        txtCourseID.setText(model.getValueAt(selectedRow, 0).toString());
        txtCourseName.setText(model.getValueAt(selectedRow, 1).toString());
        txtSemester.setText(model.getValueAt(selectedRow, 2).toString());
        txtClassroom.setText(model.getValueAt(selectedRow, 3).toString());
        txtStartTime.setText(model.getValueAt(selectedRow, 4).toString());
        txtEndTime.setText(model.getValueAt(selectedRow, 5).toString());
        
        // 设置教师comboBox
        String teacherId = model.getValueAt(selectedRow, 6).toString();
        jcbTeacher.setSelectedItem(teacherId);

        JOptionPane.showMessageDialog(this, "课程数据已加载到表单，请修改后点击保存", "提示", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        try {
            // Get form data
            String courseId = txtCourseID.getText().trim();
            String courseName = txtCourseName.getText().trim();
            String semester = txtSemester.getText().trim();
            String classroom = txtClassroom.getText().trim();
            String startTime = txtStartTime.getText().trim();
            String endTime = txtEndTime.getText().trim();
            String teacherName = (String) jcbTeacher.getSelectedItem();

            // Validate required fields
            if (courseId.isEmpty() || courseName.isEmpty() || semester.isEmpty() || 
                classroom.isEmpty() || startTime.isEmpty() || endTime.isEmpty() || teacherName == null) {
                JOptionPane.showMessageDialog(this, "Please fill in all fields", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Validate credits
            int credits;
            try {
                credits = Integer.parseInt(txtCredits.getText().trim());
                if (credits <= 0 || credits > 10) {
                    JOptionPane.showMessageDialog(this, "Credits must be between 1-10", "Error", JOptionPane.ERROR_MESSAGE);
                    txtCredits.requestFocus();
                    return;
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Credits must be a valid number", "Error", JOptionPane.ERROR_MESSAGE);
                txtCredits.requestFocus();
                return;
            }

            // Validate capacity
            int capacity;
            try {
                capacity = Integer.parseInt(txtCapacity.getText().trim());
                if (capacity <= 0 || capacity > 500) {
                    JOptionPane.showMessageDialog(this, "Course capacity must be between 1-500", "Error", JOptionPane.ERROR_MESSAGE);
                    txtCapacity.requestFocus();
                    return;
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Capacity must be a valid number", "Error", JOptionPane.ERROR_MESSAGE);
                txtCapacity.requestFocus();
                return;
            }

            // Validate course ID format (e.g., INFO 5100)
            if (!courseId.matches("[A-Za-z]{2,4} \\d{4}")) {
                JOptionPane.showMessageDialog(this, "Course ID format is incorrect (e.g., INFO 5100)", "Error", JOptionPane.ERROR_MESSAGE);
                txtCourseID.requestFocus();
                return;
            }

            // Validate time format
            if (!isValidTimeFormat(startTime) || !isValidTimeFormat(endTime)) {
                JOptionPane.showMessageDialog(this, "Time format is incorrect (e.g., 9:00AM or 13:30)", "Error", JOptionPane.ERROR_MESSAGE);
                txtStartTime.requestFocus();
                return;
            }

            // Validate semester format (e.g., Fall 2025)
            if (!semester.matches("(Fall|Spring|Summer|Winter) 20\\d{2}")) {
                JOptionPane.showMessageDialog(this, "Semester format is incorrect (e.g., Fall 2025)", "Error", JOptionPane.ERROR_MESSAGE);
                txtSemester.requestFocus();
                return;
            }

            // Execute different save logic based on mode
            if (isCreateMode) {
                createNewCourseOffering(courseId, courseName, semester, classroom, startTime, endTime, teacherName, credits, capacity);
            } else if (isUpdateMode) {
                updateExistingCourseOffering(courseId, courseName, semester, classroom, startTime, endTime, teacherName, credits, capacity);
            }

            // Switch back to view mode after saving
            setViewMode();
            clearForm();
            refreshCourseTable();

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Save failed: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void jcbTeacherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbTeacherActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbTeacherActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        CardSequencePanel.remove(this);
        CardLayout layout = (CardLayout)CardSequencePanel.getLayout();
        layout.previous(CardSequencePanel);
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> jcbTeacher;
    private javax.swing.JLabel lblCapacity;
    private javax.swing.JLabel lblClassroom;
    private javax.swing.JLabel lblCourseID;
    private javax.swing.JLabel lblCourseName;
    private javax.swing.JLabel lblCredits;
    private javax.swing.JLabel lblEndTime;
    private javax.swing.JLabel lblSemester;
    private javax.swing.JLabel lblStartTime;
    private javax.swing.JLabel lblTeacher;
    private javax.swing.JTable tblCourse;
    private javax.swing.JTextField txtCapacity;
    private javax.swing.JTextField txtClassroom;
    private javax.swing.JTextField txtCourseID;
    private javax.swing.JTextField txtCourseName;
    private javax.swing.JTextField txtCredits;
    private javax.swing.JTextField txtEndTime;
    private javax.swing.JTextField txtSemester;
    private javax.swing.JTextField txtStartTime;
    // End of variables declaration//GEN-END:variables

    private void setupCourseTable() {
        String[] columnNames = {"ID", "Name", "Semester", "Classroom", "Start Time", "End Time", "Teacher"};
    
    // 创建表格模型
        DefaultTableModel model = new DefaultTableModel(columnNames, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // 让表格不可编辑
            }
        };

        tblCourse.setModel(model);

        // 设置表格属性
        tblCourse.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tblCourse.getTableHeader().setReorderingAllowed(false);

        // 加载数据
        loadCourseTableData();
    }

    private void loadCourseTableData() {
        DefaultTableModel model = (DefaultTableModel) tblCourse.getModel();
        model.setRowCount(0); // 清空现有数据

        // 从business获取课程安排数据
        for (CourseOffering offering : business.getCourseDirectory().getCourseOfferingList()) {
            Object[] row = new Object[7];
            row[0] = offering.getCourse().getCourseId();        // ID
            row[1] = offering.getCourse().getName();           // Name
            row[2] = offering.getSemester();                   // Semester
            row[3] = offering.getSchedule().getClassRoom();    // Classroom
            row[4] = offering.getSchedule().getStartTime();    // Start Time
            row[5] = offering.getSchedule().getEndTime();      // End Time
            row[6] = offering.getFaculty().getFacultyName(); // Teacher

            model.addRow(row);
        }

        // 如果没有数据，显示提示
        if (model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "暂无课程安排数据", "提示", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void setupTeacherComboBox() {
        jcbTeacher.removeAllItems();
    
        // 从FacultyDirectory获取所有教师
        for (FacultyProfile faculty : business.getFacultyDirectory().getFacultylist()) {
            // 改为使用教师姓名
            jcbTeacher.addItem(faculty.getFacultyName());
        }

        // 如果没有教师，显示提示
        if (jcbTeacher.getItemCount() == 0) {
            JOptionPane.showMessageDialog(this, "暂无教师数据", "提示", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void setViewMode() {
       btnSave.setEnabled(false);
       txtCourseName.setEnabled(false);
       txtCourseID.setEnabled(false);
       txtSemester.setEnabled(false);
       jcbTeacher.setEnabled(false);
       txtStartTime.setEnabled(false);
       txtEndTime.setEnabled(false);
       txtClassroom.setEnabled(false);
       btnUpdate.setEnabled(true);
       btnCreate.setEnabled(true);
       txtCredits.setEnabled(false);
       txtCapacity.setEnabled(false);
    }

    private void setUpdateMode() {
       btnSave.setEnabled(true);
       txtCourseName.setEnabled(true);
       txtCourseID.setEnabled(true);
       txtSemester.setEnabled(true);
       jcbTeacher.setEnabled(true);
       txtStartTime.setEnabled(true);
       txtEndTime.setEnabled(true);
       txtClassroom.setEnabled(true);
       btnUpdate.setEnabled(false);
       btnCreate.setEnabled(false);
       txtCredits.setEnabled(true);
       txtCapacity.setEnabled(true);
    }
    
    private void setCreateMode() {
       btnSave.setEnabled(true);
       txtCourseName.setEnabled(true);
       txtCourseID.setEnabled(true);
       txtSemester.setEnabled(true);
       jcbTeacher.setEnabled(true);
       txtStartTime.setEnabled(true);
       txtEndTime.setEnabled(true);
       txtClassroom.setEnabled(true);
       btnCreate.setEnabled(false);
       txtCredits.setEnabled(true);
       txtCapacity.setEnabled(true);
    }

    private void createNewCourseOffering(String courseId, String courseName, String semester, String classroom, String startTime, String endTime, String teacherName,int credits,int capacity) {
        try {
            // 1. 创建Course对象
            Course newCourse = new Course(courseId, courseName, credits); 

            // 2. 查找对应的教师
            FacultyProfile faculty = findFacultyByName(teacherName);
            if (faculty == null) {
                throw new Exception("找不到对应的教师");
            }

            // 3. 创建Schedule对象
            Schedule schedule = new Schedule(semester, startTime, endTime, classroom);

            // 4. 创建CourseOffering对象
            CourseOffering newOffering = new CourseOffering(newCourse, faculty, schedule, capacity); // 假设容量30

            // 5. 添加到目录
            business.getCourseDirectory().addOffering(newOffering);

            JOptionPane.showMessageDialog(this, "课程创建成功", "成功", JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception e) {
            throw new RuntimeException("创建课程失败: " + e.getMessage());
        }
    }

    private void updateExistingCourseOffering(String courseId, String courseName, String semester, 
                                        String classroom, String startTime, String endTime, 
                                        String teacherName, int credits, int capacity) {
        try {
            // 1. 查找要更新的CourseOffering
            CourseOffering offeringToUpdate = findCourseOfferingById(courseId);

            if (offeringToUpdate == null) {
                throw new Exception("找不到要更新的课程");
            }

            // 2. 查找对应的教师
            FacultyProfile faculty = findFacultyByName(teacherName);
            if (faculty == null) {
                throw new Exception("找不到对应的教师");
            }

            // 3. 创建更新后的Course对象
            Course updatedCourse = new Course(courseId, courseName, credits);

            // 4. 创建更新后的Schedule对象
            Schedule updatedSchedule = new Schedule(semester, startTime, endTime, classroom);

            // 5. 创建新的CourseOffering对象（包含新的教师）
            CourseOffering updatedOffering = new CourseOffering(updatedCourse, faculty, updatedSchedule, capacity);

            // 6. 替换旧的CourseOffering
            business.getCourseDirectory().getCourseOfferingList().remove(offeringToUpdate);
            business.getCourseDirectory().addOffering(updatedOffering);

            JOptionPane.showMessageDialog(this, "课程更新成功", "成功", JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception e) {
            throw new RuntimeException("更新课程失败: " + e.getMessage());
        }
    }

    private void clearForm() {
        txtCourseID.setText("");
        txtCourseName.setText("");
        txtSemester.setText("");
        txtClassroom.setText("");
        txtStartTime.setText("");
        txtEndTime.setText("");
        jcbTeacher.setSelectedIndex(0);
        currentEditingCourseId = null;
    
    }

    private void refreshCourseTable() {
        loadCourseTableData();
    }

    private CourseOffering findCourseOfferingById(String currentEditingCourseId) {
        for (CourseOffering offering : business.getCourseDirectory().getCourseOfferingList()) {
            if (offering.getCourse().getCourseId().equals(currentEditingCourseId)) {
                return offering;
            }
        }
        return null;
    }

    private FacultyProfile findFacultyByName(String teacherName) {
        for (FacultyProfile faculty : business.getFacultyDirectory().getFacultylist()) {
            if (faculty.getFacultyName().equals(teacherName)) {
                return faculty;
            }
        }
        return null;
    }

    private Course findCourseById(String courseId) {
        // 从所有CourseOffering中查找对应的课程
        for (CourseOffering offering : business.getCourseDirectory().getCourseOfferingList()) {
            if (offering.getCourse().getCourseId().equals(courseId)) {
                return offering.getCourse();
            }
        }
        return null;
    }

    private boolean isValidTimeFormat(String timeStr) {
        if (timeStr == null || timeStr.trim().isEmpty()) {
            return false;
        }

        // Basic time format check (can be enhanced)
        return timeStr.matches("^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9](AM|PM)?$") ||
               timeStr.matches("^([0-9]|0[0-9]|1[0-2]):[0-5][0-9]\\s?(AM|PM)$");
    }
}
