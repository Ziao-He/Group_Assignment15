/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.WorkAreas.RegistrarRole;

import Business.Business;
import Business.Course.CourseOffering;
import Business.Person.Student;
import Business.UserAccounts.UserAccount;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author 心火牧神塞勒斯
 */
public class RegistrarStudentRegistrationJPanel extends javax.swing.JPanel {

    Business business;
    UserAccount useraccount;
    javax.swing.JPanel CardSequencePanel;
    private Student currentStudent; 
    /**
     * Creates new form RegistrarStudentRegistrationJPanel
     */
    public RegistrarStudentRegistrationJPanel(Business b, JPanel clp, UserAccount ua) {
        this.business = b;
        this.CardSequencePanel = clp;
        this.useraccount = ua;
        initComponents();
        setupCourseCombox();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblEnrolled = new javax.swing.JTable();
        btnSearch = new javax.swing.JButton();
        txtStudentID = new javax.swing.JTextField();
        btnRegister = new javax.swing.JButton();
        btnDrop = new javax.swing.JButton();
        jcbCourse = new javax.swing.JComboBox<>();
        lblSelectCourse = new javax.swing.JLabel();

        setBackground(new java.awt.Color(153, 255, 204));

        btnBack.setText("<<<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        tblEnrolled.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Course ID", "Course Name", "Teacher", "Credits", "Semester", "Start Time", "End Time"
            }
        ));
        jScrollPane3.setViewportView(tblEnrolled);

        btnSearch.setText("Search Student ID");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        txtStudentID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtStudentIDActionPerformed(evt);
            }
        });

        btnRegister.setText("Register");
        btnRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterActionPerformed(evt);
            }
        });

        btnDrop.setText("Drop");
        btnDrop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDropActionPerformed(evt);
            }
        });

        jcbCourse.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblSelectCourse.setText("Select Course");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1124, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnBack)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)
                                .addComponent(txtStudentID, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(lblSelectCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(40, 40, 40)
                                .addComponent(jcbCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(66, 66, 66)
                                .addComponent(btnRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(171, 171, 171)
                                .addComponent(btnDrop, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearch)
                    .addComponent(txtStudentID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcbCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSelectCourse))
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRegister)
                    .addComponent(btnDrop))
                .addContainerGap(273, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        CardSequencePanel.remove(this);
        CardLayout layout = (CardLayout)CardSequencePanel.getLayout();
        layout.previous(CardSequencePanel);
    }//GEN-LAST:event_btnBackActionPerformed

    private void txtStudentIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtStudentIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtStudentIDActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        String studentId = txtStudentID.getText().trim();
        
        if (studentId.isEmpty()) {
            JOptionPane.showMessageDialog(this, "请输入学生ID", "提示", JOptionPane.WARNING_MESSAGE);
            return;
        }

        Student student = business.getStudentDirectory().findStudentById(studentId);
        if (student == null) {
            JOptionPane.showMessageDialog(this, "找不到该学生", "错误", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // 加载学生选课表格
        if (student != null) {
            this.currentStudent = student; // 设置当前学生
            loadStudentCoursesTable(student);
        }
        
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterActionPerformed
        // TODO add your handling code here:
        if (currentStudent == null) {
            JOptionPane.showMessageDialog(this, "请先搜索并选择学生", "错误", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // 2. 检查是否已选择课程
        if (jcbCourse.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "请选择要注册的课程", "错误", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // 3. 获取选中的课程名称
            String selectedCourseName = (String) jcbCourse.getSelectedItem();

            // 4. 通过课程名称查找CourseOffering
            CourseOffering selectedOffering = findCourseOfferingByName(selectedCourseName);

            if (selectedOffering == null) {
                JOptionPane.showMessageDialog(this, "找不到对应的课程信息", "错误", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // 5. 调用学生的enrollCourse方法
            String result = currentStudent.enrollCourse(selectedOffering);

            if (result.equals("OK")) {
                JOptionPane.showMessageDialog(this, 
                    "学生 " + currentStudent.getName() + " 成功注册课程: " + selectedCourseName, 
                    "注册成功", JOptionPane.INFORMATION_MESSAGE);

                // 6. 刷新表格显示更新后的选课列表
                loadStudentCoursesTable(currentStudent);

            } else {
                JOptionPane.showMessageDialog(this, 
                    "注册失败: " + result, 
                    "错误", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, 
                "注册过程中出现错误: " + ex.getMessage(), 
                "错误", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnRegisterActionPerformed

    private void btnDropActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDropActionPerformed
        // TODO add your handling code here:
        // 1. 检查是否已选择学生
        if (currentStudent == null) {
            JOptionPane.showMessageDialog(this, "请先搜索并选择学生", "错误", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // 2. 检查是否在表格中选择了课程
        int selectedRow = tblEnrolled.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "请先选择要退掉的课程", "提示", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            // 3. 获取选中行的课程ID
            DefaultTableModel model = (DefaultTableModel) tblEnrolled.getModel();
            String courseId = model.getValueAt(selectedRow, 0).toString();

            // 4. 查找对应的CourseOffering
            CourseOffering offeringToDrop = findCourseOfferingById(courseId);
            if (offeringToDrop == null) {
                JOptionPane.showMessageDialog(this, "找不到对应的课程信息", "错误", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // 5. 确认对话框
            int confirm = JOptionPane.showConfirmDialog(this,
                "确定要为学生 " + currentStudent.getName() + " 退掉课程: " + 
                offeringToDrop.getCourse().getCourseId() + " - " + 
                offeringToDrop.getCourse().getName() + "?",
                "确认退课",
                JOptionPane.YES_NO_OPTION);

            if (confirm != JOptionPane.YES_OPTION) {
                return;
            }

            // 6. 调用学生的dropCourse方法
            String result = currentStudent.dropCourse(offeringToDrop);

            if (result.equals("OK")) {
                JOptionPane.showMessageDialog(this, 
                    "学生 " + currentStudent.getName() + " 成功退掉课程: " + 
                    offeringToDrop.getCourse().getCourseId(), 
                    "退课成功", JOptionPane.INFORMATION_MESSAGE);

                // 7. 刷新表格显示更新后的选课列表
                loadStudentCoursesTable(currentStudent);

            } else {
                JOptionPane.showMessageDialog(this, 
                    "退课失败: " + result, 
                    "错误", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, 
                "退课过程中出现错误: " + ex.getMessage(), 
                "错误", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnDropActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDrop;
    private javax.swing.JButton btnRegister;
    private javax.swing.JButton btnSearch;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JComboBox<String> jcbCourse;
    private javax.swing.JLabel lblSelectCourse;
    private javax.swing.JTable tblEnrolled;
    private javax.swing.JTextField txtStudentID;
    // End of variables declaration//GEN-END:variables

    

    private void loadStudentCoursesTable(Student student) {
        DefaultTableModel model = (DefaultTableModel) tblEnrolled.getModel();
        model.setRowCount(0);

        for (CourseOffering offering : student.getEnrolledOfferings()) {
            Object[] row = new Object[7];
            row[0] = offering.getCourse().getCourseId();        // 课程ID
            row[1] = offering.getCourse().getName();           // 课程名字
            row[2] = offering.getFaculty().getFacultyName(); // Teacher
            row[3] = offering.getCourse().getCredits();        // 学分
            row[4] = offering.getSemester();                   // 学期
            row[5] = offering.getSchedule().getStartTime();    // 开始时间
            row[6] = offering.getSchedule().getEndTime();      // 结束时间

            model.addRow(row);
        }
    }

    private void setupCourseCombox() {
        jcbCourse.removeAllItems();
    
        // 从CourseDirectory获取所有课程安排，显示课程名称
        for (CourseOffering offering : business.getCourseDirectory().getCourseOfferingList()) {
            jcbCourse.addItem(offering.getCourse().getName());
        }

        if (jcbCourse.getItemCount() == 0) {
            JOptionPane.showMessageDialog(this, "暂无课程安排", "提示", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private CourseOffering findCourseOfferingByName(String selectedCourseName) {
        for (CourseOffering offering : business.getCourseDirectory().getCourseOfferingList()) {
            if (offering.getCourse().getName().equals(selectedCourseName)) {
                return offering;
            }
        }
        return null;
    }

    private CourseOffering findCourseOfferingById(String courseId) {
        for (CourseOffering offering : business.getCourseDirectory().getCourseOfferingList()) {
            if (offering.getCourse().getCourseId().equals(courseId)) {
                return offering;
            }
        }
        return null;
    }
    
   
}
