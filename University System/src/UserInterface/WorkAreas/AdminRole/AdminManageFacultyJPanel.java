/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.WorkAreas.AdminRole;

import Business.Business;
import Business.Person.Admin;
import Business.Person.StudentDirectory;
import Business.Profiles.FacultyDirectory;
import Business.Profiles.FacultyProfile;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author bob-h
 */
public class AdminManageFacultyJPanel extends javax.swing.JPanel {

    /**
     * Admin panel for managing faculty
     * Implements 3 search methods and CRUD operations
     * Creates new form AdminManageFacultyJPanel
     */
    private Business business;
    private JPanel cardSequencePanel;
    public AdminManageFacultyJPanel(Business b, JPanel c) {
        this.business = b;
        this.cardSequencePanel = c;
        
        initComponents();
        
        // Load all faculty initially
        loadAllFaculty();
        
        // Make detail fields non-editable initially
        setDetailFieldsEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnSearchDepartment = new javax.swing.JButton();
        lblEmail = new javax.swing.JLabel();
        lblPhone = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtPhone = new javax.swing.JTextField();
        lblName = new javax.swing.JLabel();
        lblID = new javax.swing.JLabel();
        lblDepartment = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblStudent = new javax.swing.JTable();
        txtDepartment = new javax.swing.JTextField();
        btnView = new javax.swing.JButton();
        lblSearchName = new javax.swing.JLabel();
        btnEdit = new javax.swing.JButton();
        txtSearchName = new javax.swing.JTextField();
        btnDelete = new javax.swing.JButton();
        lblSearchID = new javax.swing.JLabel();
        txtSearchID = new javax.swing.JTextField();
        lblSearchDepartment = new javax.swing.JLabel();
        txtSearchDepartment = new javax.swing.JTextField();
        btnSearchName = new javax.swing.JButton();
        btnSearchID = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();

        btnSearchDepartment.setText("Search");
        btnSearchDepartment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchDepartmentActionPerformed(evt);
            }
        });

        lblEmail.setText("Email:");

        lblPhone.setText("Phone:");

        lblName.setText("Name:");

        lblID.setText("FacultyID:");

        lblDepartment.setText("Department:");

        tblStudent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Faculty ID", "Name", "Email         ", "Department", "Phone"
            }
        ));
        jScrollPane1.setViewportView(tblStudent);

        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        lblSearchName.setText("Search by Name:");

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        txtSearchName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchNameActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        lblSearchID.setText("Search by ID:");

        lblSearchDepartment.setText("Search by Department:");

        btnSearchName.setText("Search");
        btnSearchName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchNameActionPerformed(evt);
            }
        });

        btnSearchID.setText("Search");
        btnSearchID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchIDActionPerformed(evt);
            }
        });

        btnBack.setText(">> Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 705, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblSearchName)
                                    .addComponent(lblSearchID))
                                .addGap(68, 68, 68)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtSearchID, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                                    .addComponent(txtSearchName)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblSearchDepartment)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                                .addComponent(txtSearchDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(65, 65, 65)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblName)
                                    .addComponent(lblID)
                                    .addComponent(lblEmail)
                                    .addComponent(lblPhone)
                                    .addComponent(lblDepartment))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnSearchID)
                                    .addComponent(btnSearchDepartment))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSearchName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnBack))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnView)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEdit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDelete)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSearchName)
                    .addComponent(txtSearchName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchName)
                    .addComponent(btnBack))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSearchID)
                    .addComponent(txtSearchID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchID))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearchDepartment)
                    .addComponent(txtSearchDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSearchDepartment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblID)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmail)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPhone)
                    .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDepartment)
                    .addComponent(txtDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDelete)
                    .addComponent(btnView)
                    .addComponent(btnEdit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchDepartmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchDepartmentActionPerformed
        // TODO add your handling code here:
        String searchTerm = txtSearchDepartment.getText().trim();
        
        if (Admin.isEmpty(searchTerm)) {
            Admin.showWarning(this, "Please enter a department to search!");
            return;
        }
        
        List<FacultyProfile> results = searchFacultyByDepartment(searchTerm);
        populateTable(results);
        
        
        if (results.isEmpty()) {
            Admin.showInfo(this, "No faculty found in department: " + searchTerm);
        }
    }//GEN-LAST:event_btnSearchDepartmentActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        FacultyProfile faculty = getSelectedFaculty();
        
        if (faculty == null) {
            Admin.showWarning(this, "Please select a faculty member from the table first!");
            return;
        }
        
        // Display in detail fields
        displayFacultyDetails(faculty);

        // Also show info dialog
        Admin.showInfo(this, "Details are shown.");
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
        if (btnEdit.getText().equals("Edit")) {
            // Enter edit mode
            FacultyProfile faculty = getSelectedFaculty();
            
            if (faculty == null) {
                Admin.showWarning(this, "Please select a faculty member from the table first!");
                return;
            }
            
            displayFacultyDetails(faculty);
            setDetailFieldsEditable(true);
            btnEdit.setText("Save");
            btnView.setEnabled(false);
            btnDelete.setEnabled(false);
            
        } 
        else {
            // Save mode
            if (saveFacultyChanges()) {
                setDetailFieldsEditable(false);
                btnEdit.setText("Edit");
                btnView.setEnabled(true);
                btnDelete.setEnabled(true);
                loadAllFaculty();
                Admin.showSuccess(this, "Faculty information updated successfully!");
            }
        }
    }//GEN-LAST:event_btnEditActionPerformed

    private void txtSearchNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchNameActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        FacultyProfile faculty = getSelectedFaculty();
        
        if (faculty == null) {
            Admin.showWarning(this, "Please select a faculty member from the table first!");
            return;
        }
        
        // Confirmation dialog
        String confirmMsg = "This action cannot be undone!";
        
        if (!Admin.showConfirmation(this, confirmMsg)) {
            return;
        }
        
        try {
            // Remove from FacultyDirectory
            FacultyDirectory facultyDir = business.getFacultyDirectory();
            facultyDir.getFacultylist().remove(faculty);
            
            Admin.showSuccess(this, "Faculty member deleted successfully!");
            
            // Clear detail fields
            clearDetailFields();
            
            // Refresh table
            loadAllFaculty();
            
        } catch (Exception e) {
            Admin.showError(this, "Error deleting faculty: " + e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnSearchNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchNameActionPerformed
        // TODO add your handling code here:
        String searchTerm = txtSearchName.getText().trim();
        
        if (Admin.isEmpty(searchTerm)) {
            Admin.showWarning(this, "Please enter a name to search!");
            return;
        }
        
        List<FacultyProfile> results = searchFacultyByName(searchTerm);
        populateTable(results);
        
        
        if (results.isEmpty()) {
            Admin.showInfo(this, "No faculty found with name: " + searchTerm);
        }
    }//GEN-LAST:event_btnSearchNameActionPerformed

    private void btnSearchIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchIDActionPerformed
        // TODO add your handling code here:
        String searchTerm = txtSearchID.getText().trim();
        
        if (Admin.isEmpty(searchTerm)) {
            Admin.showWarning(this, "Please enter an ID to search!");
            return;
        }
        
        List<FacultyProfile> results = searchFacultyByID(searchTerm);
        populateTable(results);
        
        
        if (results.isEmpty()) {
            Admin.showInfo(this, "No faculty found with ID: " + searchTerm);
        }
    }//GEN-LAST:event_btnSearchIDActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        cardSequencePanel.remove(this);
        CardLayout layout = (CardLayout)cardSequencePanel.getLayout();
        layout.previous(cardSequencePanel);
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnSearchDepartment;
    private javax.swing.JButton btnSearchID;
    private javax.swing.JButton btnSearchName;
    private javax.swing.JButton btnView;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDepartment;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblID;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPhone;
    private javax.swing.JLabel lblSearchDepartment;
    private javax.swing.JLabel lblSearchID;
    private javax.swing.JLabel lblSearchName;
    private javax.swing.JTable tblStudent;
    private javax.swing.JTextField txtDepartment;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JTextField txtSearchDepartment;
    private javax.swing.JTextField txtSearchID;
    private javax.swing.JTextField txtSearchName;
    // End of variables declaration//GEN-END:variables

    /**
     * Load all faculty into the table
     */
    private void loadAllFaculty() {
        FacultyDirectory facultyDir = business.getFacultyDirectory();
        List<FacultyProfile> allFaculty = facultyDir.getFacultylist();
        populateTable(allFaculty);
    }
    
    /**
     * Populate JTable with faculty list
     */
    private void populateTable(List<FacultyProfile> facultyList) {
        DefaultTableModel model = (DefaultTableModel) tblStudent.getModel();
        model.setRowCount(0);  // Clear existing rows
        
        for (FacultyProfile faculty : facultyList) {
            Object[] row = new Object[5];
            row[0] = faculty.getFacultyId();
            row[1] = faculty.getFacultyName();
            row[2] = faculty.getEmail();
            row[3] = faculty.getDepartment() != null ? faculty.getDepartment() : "";
            row[4] = faculty.getPhone();
            
            model.addRow(row);
        }
    }
    
    /**
     * Get selected faculty from table
     */
    private FacultyProfile getSelectedFaculty() {
        int selectedRow = tblStudent.getSelectedRow();
        
        if (selectedRow < 0) {
            return null;
        }
        
        // Get faculty ID from selected row (column 0)
        String facultyID = (String) tblStudent.getValueAt(selectedRow, 0);
        
        // Find faculty by ID
        return findFacultyByID(facultyID);
    }
    
    /**
     * Find faculty by ID
     */
    private FacultyProfile findFacultyByID(String facultyID) {
        if (Admin.isEmpty(facultyID)) {
            return null;
        }
        
        FacultyDirectory facultyDir = business.getFacultyDirectory();
        for (FacultyProfile faculty : facultyDir.getFacultylist()) {
            if (faculty.getFacultyId() != null && 
                faculty.getFacultyId().equals(facultyID)) {
                return faculty;
            }
        }
        return null;
    }
    
    /**
     * Display faculty details in the detail fields
     */
    private void displayFacultyDetails(FacultyProfile faculty) {
        if (faculty == null) {
            clearDetailFields();
            return;
        }
        
        txtID.setText(faculty.getFacultyId());
        txtName.setText(faculty.getFacultyName());
        txtEmail.setText(faculty.getEmail() != null ? faculty.getEmail() : "");
        txtPhone.setText(faculty.getPhone() != null ? faculty.getPhone() : "");
        txtDepartment.setText(faculty.getDepartment() != null ? faculty.getDepartment() : "");
    }
    
    /**
     * Clear detail fields
     */
    private void clearDetailFields() {
        txtID.setText("");
        txtName.setText("");
        txtEmail.setText("");
        txtPhone.setText("");
        txtDepartment.setText("");
    }
    
    /**
     * Set detail fields editable or not
     */
    private void setDetailFieldsEditable(boolean editable) {
        // Name is read-only (comes from Person)
        txtName.setEditable(false);
        txtName.setBackground(new java.awt.Color(240, 240, 240));
        
        // ID is always read-only
        txtID.setEditable(false);
        txtID.setBackground(new java.awt.Color(240, 240, 240));
        
        // Email, Phone, Department can be edited
        txtEmail.setEditable(editable);
        txtPhone.setEditable(editable);
        txtDepartment.setEditable(editable);
        
        if (!editable) {
            txtEmail.setBackground(new java.awt.Color(240, 240, 240));
            txtPhone.setBackground(new java.awt.Color(240, 240, 240));
            txtDepartment.setBackground(new java.awt.Color(240, 240, 240));
        } else {
            txtEmail.setBackground(java.awt.Color.WHITE);
            txtPhone.setBackground(java.awt.Color.WHITE);
            txtDepartment.setBackground(java.awt.Color.WHITE);
        }
    }
    
    /**
     * SEARCH METHOD 1: Search faculty by name
     */
    private List<FacultyProfile> searchFacultyByName(String name) {
        List<FacultyProfile> results = new ArrayList<>();
        if (Admin.isEmpty(name)) return results;
        
        String searchTerm = name.toLowerCase().trim();
        FacultyDirectory facultyDir = business.getFacultyDirectory();
        
        for (FacultyProfile faculty : facultyDir.getFacultylist()) {
            String facultyName = faculty.getFacultyName().toLowerCase();
            if (facultyName.contains(searchTerm)) {
                results.add(faculty);
            }
        }
        
        return results;
    }
    
    /**
     * SEARCH METHOD 2: Search faculty by ID
     */
    private List<FacultyProfile> searchFacultyByID(String id) {
        List<FacultyProfile> results = new ArrayList<>();
        if (Admin.isEmpty(id)) return results;
        
        String searchTerm = id.trim();
        FacultyDirectory facultyDir = business.getFacultyDirectory();
        
        for (FacultyProfile faculty : facultyDir.getFacultylist()) {
            if (faculty.getFacultyId() != null && 
                faculty.getFacultyId().contains(searchTerm)) {
                results.add(faculty);
            }
        }
        
        return results;
    }
    
    /**
     * SEARCH METHOD 3: Search faculty by department
     */
    private List<FacultyProfile> searchFacultyByDepartment(String department) {
        List<FacultyProfile> results = new ArrayList<>();
        if (Admin.isEmpty(department)) return results;
        
        String searchTerm = department.toLowerCase().trim();
        FacultyDirectory facultyDir = business.getFacultyDirectory();
        
        for (FacultyProfile faculty : facultyDir.getFacultylist()) {
            String facultyDept = faculty.getDepartment();
            if (facultyDept != null && facultyDept.toLowerCase().contains(searchTerm)) {
                results.add(faculty);
            }
        }
        
        return results;
    }
    
    /**
     * Save faculty changes
     */
    private boolean saveFacultyChanges() {
        FacultyProfile faculty = getSelectedFaculty();
        
        if (faculty == null) {
            Admin.showError(this, "No faculty selected!");
            return false;
        }
        
        String newEmail = txtEmail.getText().trim();
        String newPhone = txtPhone.getText().trim();
        String newDepartment = txtDepartment.getText().trim();
        
        // Validate email
        if (!Admin.isValidEmail(newEmail)) {
            Admin.showError(this, "Invalid email format!");
            return false;
        }
        
        // Validate phone
        if (!Admin.isValidPhone(newPhone)) {
            Admin.showError(this, "Invalid phone number! Must be 10 digits.");
            return false;
        }
        
        // Check email conflict with other faculty
        if (!newEmail.equalsIgnoreCase(faculty.getEmail())) {
            if (isEmailUsedByOther(newEmail, faculty.getFacultyId())) {
                Admin.showError(this, "Email already used by another faculty member!");
                return false;
            }
        }
        
        try {
            // Update faculty information
            faculty.setEmail(newEmail);
            faculty.setPhone(newPhone);
            faculty.setDepartment(newDepartment);
            
            return true;
            
        } catch (Exception e) {
            Admin.showError(this, "Error saving changes: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }
    
    /**
     * Check if email is used by another faculty member
     */
    private boolean isEmailUsedByOther(String email, String currentFacultyID) {
        if (Admin.isEmpty(email)) {
            return false;
        }
        
        String emailLower = email.toLowerCase().trim();
        FacultyDirectory facultyDir = business.getFacultyDirectory();
        
        for (FacultyProfile faculty : facultyDir.getFacultylist()) {
            if (!faculty.getFacultyId().equals(currentFacultyID)) {
                String facultyEmail = faculty.getEmail();
                if (facultyEmail != null && facultyEmail.toLowerCase().equals(emailLower)) {
                    return true;
                }
            }
        }
        
        return false;
    }
}
