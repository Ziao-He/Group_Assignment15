/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.WorkAreas.AdminRole;

import Business.Business;
import Business.Person.Admin;
import Business.Profiles.RegistrarDirectory;
import Business.Profiles.RegistrarProfile;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author bob-h
 */
public class AdminManageRegisterJPanel extends javax.swing.JPanel {

    /**
     * Creates new form AdminManageRegisterJPanel
     */
    private Business business;
    private JPanel cardSequencePanel;
    public AdminManageRegisterJPanel(Business b, JPanel c) {
        this.business = b;
        this.cardSequencePanel = c;
        
        initComponents();
        
        // Load all registrars
        loadAllRegistrars();
        
        // Make detail fields non-editable initially
        setDetailFieldsEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblID = new javax.swing.JLabel();
        txtSearchID = new javax.swing.JTextField();
        lblHours = new javax.swing.JLabel();
        lblSearchEmail = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRegister = new javax.swing.JTable();
        txtSearchEmail = new javax.swing.JTextField();
        btnSearchName = new javax.swing.JButton();
        txtHour = new javax.swing.JTextField();
        btnSearchID = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        lblSearchName = new javax.swing.JLabel();
        btnEdit = new javax.swing.JButton();
        btnSearchEmail = new javax.swing.JButton();
        txtSearchName = new javax.swing.JTextField();
        lblEmail = new javax.swing.JLabel();
        btnDelete = new javax.swing.JButton();
        lblPhone = new javax.swing.JLabel();
        lblSearchID = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtPhone = new javax.swing.JTextField();
        lblName = new javax.swing.JLabel();
        lblLoc = new javax.swing.JLabel();
        txtLoc = new javax.swing.JTextField();

        lblID.setText("Registrar ID:");

        lblHours.setText("Office Hours:");

        lblSearchEmail.setText("Search by Email:");

        tblRegister.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Register ID", "Name", "Email         ", "Location", "Phone"
            }
        ));
        jScrollPane1.setViewportView(tblRegister);

        btnSearchName.setText("Search");
        btnSearchName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchNameActionPerformed(evt);
            }
        });

        btnSearchID.setText("Search");
        btnSearchID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchIDActionPerformed(evt);
            }
        });

        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnBack.setText(">> Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblSearchName.setText("Search by Name:");

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnSearchEmail.setText("Search");
        btnSearchEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchEmailActionPerformed(evt);
            }
        });

        txtSearchName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchNameActionPerformed(evt);
            }
        });

        lblEmail.setText("Email:");

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        lblPhone.setText("Phone:");

        lblSearchID.setText("Search by ID:");

        lblName.setText("Name:");

        lblLoc.setText("Office Loc:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 705, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblSearchName)
                                    .addComponent(lblSearchID))
                                .addGap(68, 68, 68)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtSearchID, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                                    .addComponent(txtSearchName)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblSearchEmail)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE)
                                .addComponent(txtSearchEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(65, 65, 65)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblName)
                                    .addComponent(lblID)
                                    .addComponent(lblEmail)
                                    .addComponent(lblPhone)
                                    .addComponent(lblHours)
                                    .addComponent(lblLoc))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtHour, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtLoc, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnSearchID)
                                    .addComponent(btnSearchEmail))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSearchName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnBack))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnView)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEdit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDelete)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSearchName)
                    .addComponent(txtSearchName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchName)
                    .addComponent(btnBack))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSearchID)
                    .addComponent(txtSearchID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchID))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearchEmail)
                    .addComponent(txtSearchEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSearchEmail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblID)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmail)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPhone)
                    .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHours)
                    .addComponent(txtHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLoc)
                    .addComponent(txtLoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDelete)
                    .addComponent(btnView)
                    .addComponent(btnEdit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchNameActionPerformed
        // TODO add your handling code here:
        String searchTerm = txtSearchName.getText().trim();
        
        if (Admin.isEmpty(searchTerm)) {
            Admin.showWarning(this, "Please enter a name!");
            return;
        }
        
        List<RegistrarProfile> results = searchRegistrarsByName(searchTerm);
        populateTable(results);
        
        if (results.isEmpty()) {
            Admin.showInfo(this, "No registrars found with name: " + searchTerm);
        }
    }//GEN-LAST:event_btnSearchNameActionPerformed

    private void btnSearchIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchIDActionPerformed
        // TODO add your handling code here:
        String searchTerm = txtSearchID.getText().trim();
        
        if (Admin.isEmpty(searchTerm)) {
            Admin.showWarning(this, "Please enter an ID!");
            return;
        }
        
        List<RegistrarProfile> results = searchRegistrarsByID(searchTerm);
        populateTable(results);
        
        if (results.isEmpty()) {
            Admin.showInfo(this, "No registrars found with ID: " + searchTerm);
        }
    }//GEN-LAST:event_btnSearchIDActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        RegistrarProfile registrar = getSelectedRegistrar();
        
        if (registrar == null) {
            Admin.showWarning(this, "Please select a registrar!");
            return;
        }
        
        displayRegistrarDetails(registrar);
        
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        cardSequencePanel.remove(this);
        CardLayout layout = (CardLayout)cardSequencePanel.getLayout();
        layout.previous(cardSequencePanel);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
        if (btnEdit.getText().equals("Edit")) {
            RegistrarProfile registrar = getSelectedRegistrar();
            
            if (registrar == null) {
                Admin.showWarning(this, "Please select a registrar!");
                return;
            }
            
            displayRegistrarDetails(registrar);
            setDetailFieldsEditable(true);
            btnEdit.setText("Save");
            btnView.setEnabled(false);
            btnDelete.setEnabled(false);
            
        } 
        else {
            if (saveRegistrarChanges()) {
                setDetailFieldsEditable(false);
                btnEdit.setText("Edit");
                btnView.setEnabled(true);
                btnDelete.setEnabled(true);
                loadAllRegistrars();
                Admin.showSuccess(this, "Registrar updated!");
            }
        }
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnSearchEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchEmailActionPerformed
        // TODO add your handling code here:
        String searchTerm = txtSearchEmail.getText().trim();
        
        if (Admin.isEmpty(searchTerm)) {
            Admin.showWarning(this, "Please enter an email!");
            return;
        }
        
        List<RegistrarProfile> results = searchRegistrarsByEmail(searchTerm);
        populateTable(results);
        
        if (results.isEmpty()) {
            Admin.showInfo(this, "No registrars found with email: " + searchTerm);
        }
    }//GEN-LAST:event_btnSearchEmailActionPerformed

    private void txtSearchNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchNameActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        RegistrarProfile registrar = getSelectedRegistrar();
        
        if (registrar == null) {
            Admin.showWarning(this, "Please select a registrar!");
            return;
        }
        
        String msg = "Delete this registrar?\n\nCannot be undone!";
        
        if (!Admin.showConfirmation(this, msg)) {
            return;
        }
        
        try {
            business.getRegistrarDirectory().getRegistrarList().remove(registrar);
            
            Admin.showSuccess(this, "Registrar deleted!");
            clearDetailFields();
            loadAllRegistrars();

        } catch (Exception e) {
            Admin.showError(this, "Error: " + e.getMessage());
        }
    }//GEN-LAST:event_btnDeleteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnSearchEmail;
    private javax.swing.JButton btnSearchID;
    private javax.swing.JButton btnSearchName;
    private javax.swing.JButton btnView;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblHours;
    private javax.swing.JLabel lblID;
    private javax.swing.JLabel lblLoc;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPhone;
    private javax.swing.JLabel lblSearchEmail;
    private javax.swing.JLabel lblSearchID;
    private javax.swing.JLabel lblSearchName;
    private javax.swing.JTable tblRegister;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtHour;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtLoc;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JTextField txtSearchEmail;
    private javax.swing.JTextField txtSearchID;
    private javax.swing.JTextField txtSearchName;
    // End of variables declaration//GEN-END:variables

    /**
     * Load all registrars into table
     */
    private void loadAllRegistrars() {
        RegistrarDirectory regDir = business.getRegistrarDirectory();
        List<RegistrarProfile> allRegistrars = regDir.getRegistrarList();
        populateTable(allRegistrars);
    }
    
    /**
     * Populate JTable with registrar list
     */
    private void populateTable(List<RegistrarProfile> registrarList) {
        DefaultTableModel model = (DefaultTableModel) tblRegister.getModel();
        model.setRowCount(0);
        
        for (RegistrarProfile registrar : registrarList) {
            Object[] row = new Object[5];
            row[0] = registrar.getRegistrarId();
            row[1] = registrar.getPerson().toString();  // Name from Person
            row[2] = registrar.getEmail() != null ? registrar.getEmail() : "";
            row[3] = registrar.getOfficeLocation() != null ? registrar.getOfficeLocation() : "";
            row[4] = registrar.getPhone() != null ? registrar.getPhone() : "";
            
            model.addRow(row);
        }
    }
    
    /**
     * Get selected registrar from table
     */
    private RegistrarProfile getSelectedRegistrar() {
        int selectedRow = tblRegister.getSelectedRow();
        
        if (selectedRow < 0) {
            return null;
        }
        
        // Get registrar ID from selected row (column 0 based on table)
        String registrarID = (String) tblRegister.getValueAt(selectedRow, 0);
        
        return findRegistrarByID(registrarID);
    }
    
    /**
     * Find registrar by ID
     */
    private RegistrarProfile findRegistrarByID(String registrarID) {
        if (Admin.isEmpty(registrarID)) {
            return null;
        }
        
        RegistrarDirectory regDir = business.getRegistrarDirectory();
        for (RegistrarProfile rp : regDir.getRegistrarList()) {
            if (rp.getRegistrarId() != null && rp.getRegistrarId().equals(registrarID)) {
                return rp;
            }
        }
        return null;
    }
    
     /**
     * Display registrar details
     */
    private void displayRegistrarDetails(RegistrarProfile registrar) {
        if (registrar == null) {
            clearDetailFields();
            return;
        }
        
        txtID.setText(registrar.getRegistrarId());
        txtName.setText(registrar.getPerson().toString());
        txtEmail.setText(registrar.getEmail() != null ? registrar.getEmail() : "");
        txtPhone.setText(registrar.getPhone() != null ? registrar.getPhone() : "");
        txtHour.setText(registrar.getOfficeHours() != null ? registrar.getOfficeHours() : "");
        txtLoc.setText(registrar.getOfficeLocation() != null ? registrar.getOfficeLocation() : "");
    }
    
    /**
     * Clear detail fields
     */
    private void clearDetailFields() {
        txtID.setText("");
        txtName.setText("");
        txtEmail.setText("");
        txtPhone.setText("");
        txtHour.setText("");
        txtLoc.setText("");
    }
    
    /**
     * Set detail fields editable
     */
    private void setDetailFieldsEditable(boolean editable) {
        // ID and Name are always read-only
        txtID.setEditable(false);
        txtID.setBackground(new java.awt.Color(240, 240, 240));
        txtName.setEditable(false);
        txtName.setBackground(new java.awt.Color(240, 240, 240));
        
        // Other fields can be edited
        txtEmail.setEditable(editable);
        txtPhone.setEditable(editable);
        txtHour.setEditable(editable);
        txtLoc.setEditable(editable);
        
        if (!editable) {
            txtEmail.setBackground(new java.awt.Color(240, 240, 240));
            txtPhone.setBackground(new java.awt.Color(240, 240, 240));
            txtHour.setBackground(new java.awt.Color(240, 240, 240));
            txtLoc.setBackground(new java.awt.Color(240, 240, 240));
        } else {
            txtEmail.setBackground(java.awt.Color.WHITE);
            txtPhone.setBackground(java.awt.Color.WHITE);
            txtHour.setBackground(java.awt.Color.WHITE);
            txtLoc.setBackground(java.awt.Color.WHITE);
        }
    }
    
    /**
     * SEARCH METHOD 1: By name
     */
    private List<RegistrarProfile> searchRegistrarsByName(String name) {
        List<RegistrarProfile> results = new ArrayList<>();
        if (Admin.isEmpty(name)) return results;
        
        String searchTerm = name.toLowerCase();
        for (RegistrarProfile rp : business.getRegistrarDirectory().getRegistrarList()) {
            String regName = rp.getPerson().toString().toLowerCase();
            if (regName.contains(searchTerm)) {
                results.add(rp);
            }
        }
        return results;
    }
    
    /**
     * SEARCH METHOD 2: By ID
     */
    private List<RegistrarProfile> searchRegistrarsByID(String id) {
        List<RegistrarProfile> results = new ArrayList<>();
        if (Admin.isEmpty(id)) return results;
        
        for (RegistrarProfile rp : business.getRegistrarDirectory().getRegistrarList()) {
            if (rp.getRegistrarId() != null && rp.getRegistrarId().contains(id)) {
                results.add(rp);
            }
        }
        return results;
    }
    
    /**
     * SEARCH METHOD 3: By email
     */
    private List<RegistrarProfile> searchRegistrarsByEmail(String email) {
        List<RegistrarProfile> results = new ArrayList<>();
        if (Admin.isEmpty(email)) return results;
        
        String searchTerm = email.toLowerCase();
        for (RegistrarProfile rp : business.getRegistrarDirectory().getRegistrarList()) {
            if (rp.getEmail() != null && rp.getEmail().toLowerCase().contains(searchTerm)) {
                results.add(rp);
            }
        }
        return results;
    }
    
    /**
     * Save registrar changes
     */
    private boolean saveRegistrarChanges() {
        RegistrarProfile registrar = getSelectedRegistrar();
        if (registrar == null) return false;
        
        String newEmail = txtEmail.getText().trim();
        String newPhone = txtPhone.getText().trim();
        String newOfficeHours = txtHour.getText().trim();
        String newOfficeLocation = txtLoc.getText().trim();
        
        // Validate
        if (!Admin.isValidEmail(newEmail)) {
            Admin.showError(this, "Invalid email!");
            return false;
        }
        
        if (!Admin.isValidPhone(newPhone)) {
            Admin.showError(this, "Invalid phone!");
            return false;
        }
        
        // Check email conflict
        if (!newEmail.equalsIgnoreCase(registrar.getEmail())) {
            if (isEmailUsedByOther(newEmail, registrar.getRegistrarId())) {
                Admin.showError(this, "Email already used!");
                return false;
            }
        }
        
        try {
            registrar.setEmail(newEmail);
            registrar.setPhone(newPhone);
            registrar.setOfficeHours(newOfficeHours);
            registrar.setOfficeLocation(newOfficeLocation);
            
            return true;
        } catch (Exception e) {
            Admin.showError(this, "Error: " + e.getMessage());
            return false;
        }
    }
    
    /**
     * Check if email used by other registrar
     */
    private boolean isEmailUsedByOther(String email, String currentID) {
        String emailLower = email.toLowerCase();
        
        for (RegistrarProfile rp : business.getRegistrarDirectory().getRegistrarList()) {
            if (!rp.getRegistrarId().equals(currentID)) {
                if (rp.getEmail() != null && rp.getEmail().toLowerCase().equals(emailLower)) {
                    return true;
                }
            }
        }
        return false;
    }
}
