/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.WorkAreas.AdminRole;

import Business.Business;
import Business.Person.Admin;
import Business.Person.Person;
import Business.Person.PersonDirectory;
import Business.Person.Student;
import Business.Person.StudentDirectory;
import Business.Profiles.FacultyDirectory;
import Business.Profiles.FacultyProfile;
import javax.swing.JPanel;

/**
 *
 * @author bob-h
 */
public class AdminFacultyJPanel extends javax.swing.JPanel {

    /**
     * Creates new form AdminFacultyJPanel
     */
    private Business business;
    private JPanel cardSequencePanel;
    private static int facultyCounter = 1;
    public AdminFacultyJPanel(Business b, JPanel c) {
        this.business = b;
        this.cardSequencePanel = c;
        initComponents();
        generateAndDisplayFacultyID();
        txtID.setEditable(false);
        txtID.setBackground(new java.awt.Color(240, 240, 240));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblID = new javax.swing.JLabel();
        lblEmail = new javax.swing.JLabel();
        lblPhone = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtPhone = new javax.swing.JTextField();
        btnSave = new javax.swing.JButton();

        lblID.setText("FacultyId: ");

        lblEmail.setText("Email: ");

        lblPhone.setText("Phone: ");

        lblName.setText("Name: ");

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(238, 238, 238)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblName)
                    .addComponent(lblPhone)
                    .addComponent(lblID)
                    .addComponent(lblEmail))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSave)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(238, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblID)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmail)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPhone)
                    .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 261, Short.MAX_VALUE)
                .addComponent(btnSave)
                .addGap(65, 65, 65))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        // Get input values
        String facultyID = txtID.getText().trim();
        String name = txtName.getText().trim();
        String email = txtEmail.getText().trim();
        String phone = txtPhone.getText().trim();
        
        // Validate inputs
        if (!validateInputs(name, email, phone)) {
            return;
        }
        
        // Check for duplicate Faculty ID
        if (isDuplicateFacultyID(facultyID)) {
            Admin.showError(this, "Faculty ID already exists!\nGenerating new ID...");
            generateAndDisplayFacultyID();
            return;
        }
        
        // Check for duplicate email
        if (isDuplicateEmail(email)) {
            Admin.showError(this, "Email already exists in the system!\nPlease use a different email.");
            return;
        }
        
        try {
            // Create Person object for Faculty
            PersonDirectory personDir = business.getPersonDirectory();
            Person facultyPerson = personDir.newPerson(name);
            
            // Create FacultyProfile with ID, email, and phone
            FacultyProfile newFaculty = new FacultyProfile(facultyID, email, phone, facultyPerson);
            
            // Add to FacultyDirectory
            FacultyDirectory facultyDir = business.getFacultyDirectory();
            facultyDir.getFacultylist().add(newFaculty);
            
            // Success message
            String successMsg = "All done.";
            
            Admin.showSuccess(this, successMsg);
            
            // Reset form for next registration
            resetForm();
            
        } catch (Exception e) {
            Admin.showError(this, "Error registering faculty: " + e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnSaveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblID;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPhone;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPhone;
    // End of variables declaration//GEN-END:variables

    private void generateAndDisplayFacultyID() {
        String facultyID = generateFacultyID();
        txtID.setText(facultyID);
    }
    
    /**
     * Generate unique Faculty ID
     * Format: 4-digit number (e.g., 0001, 0002, ..., 9999)
     */
    private String generateFacultyID() {
        String id = String.format("%04d", facultyCounter);
        facultyCounter++;
        
        // Reset counter if it exceeds 9999
        if (facultyCounter > 9999) {
            facultyCounter = 1;
        }
        
        return id;
    }

    
    /**
     * Validate all input fields
     */
    private boolean validateInputs(String name, String email, String phone) {
        // Validate name
        if (Admin.isEmpty(name)) {
            Admin.showError(this, "Name cannot be empty!");
            txtName.requestFocus();
            return false;
        }
        
        if (!Admin.isValidName(name)) {
            Admin.showError(this, "Invalid name! Name must be at least 2 letters and contain only letters and spaces.");
            txtName.requestFocus();
            return false;
        }
        
        // Validate email
        if (Admin.isEmpty(email)) {
            Admin.showError(this, "Email cannot be empty!");
            txtEmail.requestFocus();
            return false;
        }
        
        if (!Admin.isValidEmail(email)) {
            Admin.showError(this, "Invalid email format!\nExample: faculty@university.edu");
            txtEmail.requestFocus();
            return false;
        }
        
        // Validate phone
        if (Admin.isEmpty(phone)) {
            Admin.showError(this, "Phone cannot be empty!");
            txtPhone.requestFocus();
            return false;
        }
        
        if (!Admin.isValidPhone(phone)) {
            Admin.showError(this, "Invalid phone number!\nPhone must be 10 digits.\nAccepted formats: 1234567890, 123-456-7890, (123) 456-7890");
            txtPhone.requestFocus();
            return false;
        }
        
        return true;
    }
    
    /**
     * Check if Faculty ID already exists
     */
    private boolean isDuplicateFacultyID(String facultyID) {
        if (Admin.isEmpty(facultyID)) {
            return false;
        }
        
        FacultyDirectory facultyDir = business.getFacultyDirectory();
        for (FacultyProfile faculty : facultyDir.getFacultylist()) {
            if (faculty.getFacultyId() != null && faculty.getFacultyId().equals(facultyID)) {
                return true;
            }
        }
        
        return false;
    }
    
    /**
     * Get student email using reflection
     */
    private String getStudentEmail(Student student) {
        try {
            java.lang.reflect.Field emailField = Student.class.getDeclaredField("email");
            emailField.setAccessible(true);
            return (String) emailField.get(student);
        } catch (Exception e) {
            return null;
        }
    }
    
    /**
     * Check if email already exists in the system
     */
    private boolean isDuplicateEmail(String email) {
        if (Admin.isEmpty(email)) {
            return false;
        }
        
        String emailLower = email.toLowerCase().trim();
        
        // Check in FacultyDirectory
        FacultyDirectory facultyDir = business.getFacultyDirectory();
        for (FacultyProfile faculty : facultyDir.getFacultylist()) {
            String facultyEmail = faculty.getEmail();
            if (facultyEmail != null && facultyEmail.toLowerCase().equals(emailLower)) {
                return true;
            }
        }
        
        StudentDirectory studentDir = business.getStudentDirectory();
        for (Student student : studentDir.getStudentList()) {
            String studentEmail = getStudentEmail(student);
            if (studentEmail != null && studentEmail.toLowerCase().equals(emailLower)) {
                return true;
            }
        }
        return false;
    }
    
    /**
     * Reset form to initial state
     */
    private void resetForm() {
        txtName.setText("");
        txtEmail.setText("");
        txtPhone.setText("");
        
        // Generate new Faculty ID for next registration
        generateAndDisplayFacultyID();
        
        // Set focus to name field
        txtName.requestFocus();
    }
    
}
