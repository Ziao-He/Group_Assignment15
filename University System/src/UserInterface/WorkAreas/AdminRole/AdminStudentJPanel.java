/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.WorkAreas.AdminRole;

import Business.Business;
import Business.Person.Admin;
import Business.Person.Student;
import Business.Person.StudentDirectory;
import Business.Profiles.FacultyDirectory;
import Business.Profiles.FacultyProfile;
import javax.swing.JPanel;

/**
 * Panel for registering new students
 * 
 * @author bob-h
 */
public class AdminStudentJPanel extends javax.swing.JPanel {

    /**
     * Creates new form AdminStudentJPanel
     */
    private Business business;
    private JPanel cardSequencePanel;
    private static int studentCounter = 1;
    public AdminStudentJPanel(Business b, JPanel c) {
        this.business = b;
        this.cardSequencePanel = c;
        initComponents();
        // Sync counter with existing data
        syncCounterWithExistingData();
        
        // Generate and display Student ID
        generateAndDisplayStudentID();
        txtID.setEditable(false);
        txtID.setBackground(new java.awt.Color(240, 240, 240));
        
        txtBalance.setText("0.0");
        txtBalance.setEditable(false);
        txtBalance.setBackground(new java.awt.Color(240, 240, 240));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblName = new javax.swing.JLabel();
        lblID = new javax.swing.JLabel();
        lblEmail = new javax.swing.JLabel();
        lblPhone = new javax.swing.JLabel();
        lblBalance = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtPhone = new javax.swing.JTextField();
        txtBalance = new javax.swing.JTextField();
        btnSaveStudent = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();

        lblName.setText("Name:");

        lblID.setText("StudentID:");

        lblEmail.setText("Email:");

        lblPhone.setText("Phone:");

        lblBalance.setText("Balance:");

        btnSaveStudent.setText("Save");
        btnSaveStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveStudentActionPerformed(evt);
            }
        });

        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnSaveStudent)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnReset))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(238, 238, 238)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblPhone)
                                    .addComponent(lblBalance))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(224, 224, 224)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblName)
                                    .addComponent(lblID)
                                    .addComponent(lblEmail))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(24, 24, 24)
                                        .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtID, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addGap(0, 242, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblID)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmail)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPhone)
                    .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBalance)
                    .addComponent(txtBalance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 224, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSaveStudent)
                    .addComponent(btnReset))
                .addGap(91, 91, 91))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveStudentActionPerformed
        // TODO add your handling code here:
        String studentID = txtID.getText().trim();
        String name = txtName.getText().trim();
        String email = txtEmail.getText().trim();
        String phone = txtPhone.getText().trim();
        
        // Validate inputs
        if (!validateInputs(name, email, phone)) {
            return;
        }
        
        // Check for duplicate Student ID
        if (isDuplicateStudentID(studentID)) {
            Admin.showError(this, "Student ID already exists!\nPlease try again.");
            // Re-sync counter and regenerate ID
            syncCounterWithExistingData();
            generateAndDisplayStudentID();
            return;
        }
        
        // Check for duplicate email
        if (isDuplicateEmail(email)) {
            Admin.showError(this, "Email already exists in the system!\nPlease use a different email.");
            return;
        }
        
        try {
            // Create new Student
            Student newStudent = new Student(studentID, name, "Student");
            
            // Set email and phone
            newStudent.setEmail(email);
            newStudent.setPhone(phone);
            
            // Add to StudentDirectory
            StudentDirectory studentDir = business.getStudentDirectory();
            studentDir.addStudent(newStudent);
            
            // Success message
            String successMsg = "Student registered successfully!";
            
            Admin.showSuccess(this, successMsg);

            
            // Increment counter only after successful save
            studentCounter++;
            
            // Reset form for next registration
            resetForm();
            
        } catch (Exception e) {
            Admin.showError(this, "Error registering student: " + e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnSaveStudentActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        resetForm();
    }//GEN-LAST:event_btnResetActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSaveStudent;
    private javax.swing.JLabel lblBalance;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblID;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPhone;
    private javax.swing.JTextField txtBalance;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPhone;
    // End of variables declaration//GEN-END:variables

    /**
     * Generate and display unique Student ID
     */
    private void generateAndDisplayStudentID() {
        String studentID = generateStudentID();
        txtID.setText(studentID);
    }
    
    /**
     * Generate unique Student ID
     * Format: 4-digit number (e.g., 0001, 0002, ..., 9999)
     */
    private String generateStudentID() {
        String id = String.format("%04d", studentCounter);
        return id;
    }
    
    /**
     * Validate all input fields
     */
    private boolean validateInputs(String name, String email, String phone) {
        // Validate name
        if (Admin.isEmpty(name)) {
            Admin.showError(this, "Name cannot be empty!");
            txtName.requestFocus();
            return false;
        }
        
        if (!Admin.isValidName(name)) {
            Admin.showError(this, "Invalid name! Name must be at least 2 letters and contain only letters and spaces.");
            txtName.requestFocus();
            return false;
        }
        
        // Validate email
        if (Admin.isEmpty(email)) {
            Admin.showError(this, "Email cannot be empty!");
            txtEmail.requestFocus();
            return false;
        }
        
        if (!Admin.isValidEmail(email)) {
            Admin.showError(this, "Invalid email format!\nExample: student@university.edu");
            txtEmail.requestFocus();
            return false;
        }
        
        // Validate phone
        if (Admin.isEmpty(phone)) {
            Admin.showError(this, "Phone cannot be empty!");
            txtPhone.requestFocus();
            return false;
        }
        
        if (!Admin.isValidPhone(phone)) {
            Admin.showError(this, "Invalid phone number!\nPhone must be 10 digits.\nAccepted formats: 1234567890, 123-456-7890, (123) 456-7890");
            txtPhone.requestFocus();
            return false;
        }
        
        return true;
    }
    
    /**
     * Check if Student ID already exists
     */
    private boolean isDuplicateStudentID(String studentID) {
        if (Admin.isEmpty(studentID)) {
            return false;
        }
        
        StudentDirectory studentDir = business.getStudentDirectory();
        for (Student student : studentDir.getStudentList()) {
            if (student.getStudentId().equals(studentID)) {
                return true;
            }
        }
        
        return false;
    }
    
    /**
     * Check if email already exists in the system
     */
    private boolean isDuplicateEmail(String email) {
        if (Admin.isEmpty(email)) {
            return false;
        }
        
        String emailLower = email.toLowerCase().trim();
        
        // Check in StudentDirectory
        StudentDirectory studentDir = business.getStudentDirectory();
        for (Student student : studentDir.getStudentList()) {
            String studentEmail = getStudentEmail(student);
            if (studentEmail != null && studentEmail.toLowerCase().equals(emailLower)) {
                return true;
            }
        }
        
        FacultyDirectory facultyDir = business.getFacultyDirectory();
        for (FacultyProfile faculty : facultyDir.getFacultylist()) {
            String facultyEmail = faculty.getEmail();
            if (facultyEmail != null && facultyEmail.toLowerCase().equals(emailLower)) {
                return true;
            }
        }
        
        return false;
    }
    
    /**
     * Set student contact information
     * Uses reflection if Student doesn't have setEmail/setPhone methods
     */
    private void setStudentContactInfo(Student student, String email, String phone) {
        student.setEmail(email);
        student.setPhone(phone);
        System.out.println("✅ Set email and phone for: " + student.getStudentId());
    }
    
    /**
     * Get student email using reflection
     */
    private String getStudentEmail(Student student) {
        return student.getEmail() != null ? student.getEmail() : "";
    }
    
    /**
     * Reset form to initial state
     */
    private void resetForm() {
        txtName.setText("");
        txtEmail.setText("");
        txtPhone.setText("");
        txtBalance.setText("0.0");
        
        // Generate new Student ID
        generateAndDisplayStudentID();
        
        txtName.requestFocus();
    }
    
    /**
     * Sync counter with existing student data
     * Finds the maximum existing Student ID and sets counter to max + 1
     */
    private void syncCounterWithExistingData() {
        StudentDirectory studentDir = business.getStudentDirectory();
        int maxID = 0;
        
        for (Student student : studentDir.getStudentList()) {
            if (student.getStudentId() != null) {
                try {
                    // Parse student ID to integer
                    int id = Integer.parseInt(student.getStudentId());
                    if (id > maxID) {
                        maxID = id;
                    }
                } catch (NumberFormatException e) {
                    // Ignore non-numeric IDs
                }
            }
        }
        
        // Set counter to max + 1
        if (maxID > 0) {
            studentCounter = maxID + 1;
        }
    }
}
