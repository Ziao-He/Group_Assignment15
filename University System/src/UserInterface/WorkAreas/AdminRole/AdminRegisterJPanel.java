/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.WorkAreas.AdminRole;

import Business.Business;
import Business.Person.Admin;
import Business.Person.Person;
import Business.Person.PersonDirectory;
import Business.Person.Student;
import Business.Person.StudentDirectory;
import Business.Profiles.FacultyDirectory;
import Business.Profiles.FacultyProfile;
import Business.Profiles.RegistrarDirectory;
import Business.Profiles.RegistrarProfile;
import javax.swing.JPanel;

/**
 *
 * @author bob-h
 */
public class AdminRegisterJPanel extends javax.swing.JPanel {

    /**
     * Panel for registering new registrars
     * Creates new form AdminRegisterJPanel
     */
    private Business business;
    private JPanel cardSequencePanel;
    private static int registrarCounter = 1;
    public AdminRegisterJPanel(Business b, JPanel c) {
        this.business = b;
        this.cardSequencePanel = c;
        
        initComponents();
        
        // Sync counter with existing data
        syncCounterWithExistingData();
        
        // Generate and display Registrar ID
        generateAndDisplayRegistrarID();
        
        // Make ID read-only
        txtID.setEditable(false);
        txtID.setBackground(new java.awt.Color(240, 240, 240));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnReset = new javax.swing.JButton();
        btnSaveStudent = new javax.swing.JButton();
        lblID = new javax.swing.JLabel();
        lblEmail = new javax.swing.JLabel();
        lblPhone = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtPhone = new javax.swing.JTextField();
        lblHour = new javax.swing.JLabel();
        txtHour = new javax.swing.JTextField();
        lblLoc = new javax.swing.JLabel();
        txtLoc = new javax.swing.JTextField();

        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btnSaveStudent.setText("Save");
        btnSaveStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveStudentActionPerformed(evt);
            }
        });

        lblID.setText("Register Id: ");

        lblEmail.setText("Email: ");

        lblPhone.setText("Phone: ");

        lblName.setText("Name: ");

        lblHour.setText("Office Hours:");

        lblLoc.setText("Office Location:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnSaveStudent)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 561, Short.MAX_VALUE)
                .addComponent(btnReset)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(225, 225, 225)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblLoc)
                    .addComponent(lblHour)
                    .addComponent(lblName)
                    .addComponent(lblPhone)
                    .addComponent(lblID)
                    .addComponent(lblEmail))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtID, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                    .addComponent(txtName, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                    .addComponent(txtEmail, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                    .addComponent(txtPhone, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                    .addComponent(txtHour)
                    .addComponent(txtLoc))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblID)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmail)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPhone)
                    .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHour)
                    .addComponent(txtHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLoc)
                    .addComponent(txtLoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 184, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSaveStudent)
                    .addComponent(btnReset))
                .addGap(82, 82, 82))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        resetForm();
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnSaveStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveStudentActionPerformed
        // TODO add your handling code here:
        String registrarID = txtID.getText().trim();
        String name = txtName.getText().trim();
        String email = txtEmail.getText().trim();
        String phone = txtPhone.getText().trim();
        String officeHours = txtHour.getText().trim();
        String officeLocation = txtLoc.getText().trim();
        
        // Validate inputs
        if (!validateInputs(name, email, phone, officeHours)) {
            return;
        }
        
        // Check for duplicate Registrar ID
        if (isDuplicateRegistrarID(registrarID)) {
            Admin.showError(this, "Registrar ID already exists!");
            syncCounterWithExistingData();
            generateAndDisplayRegistrarID();
            return;
        }
        
        // Check for duplicate email
        if (isDuplicateEmail(email)) {
            Admin.showError(this, "Email already exists in the system!");
            return;
        }
        
        try {
            // Create Person for Registrar
            PersonDirectory personDir = business.getPersonDirectory();
            Person registrarPerson = personDir.newPerson(name);
            
            // Create RegistrarProfile with all information
            RegistrarDirectory regDir = business.getRegistrarDirectory();
            RegistrarProfile newRegistrar = regDir.newRegistrarProfile(
                registrarPerson,
                registrarID,
                email,
                phone,
                officeHours,
                officeLocation
            );
            
            // Success message
            String successMsg ="Registrar registered successfully!\n\n";
            
            Admin.showSuccess(this, successMsg);
            
            
            // Increment counter
            registrarCounter++;
            
            // Reset form
            resetForm();
            
        } catch (Exception e) {
            Admin.showError(this, "Error registering registrar: " + e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnSaveStudentActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSaveStudent;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblHour;
    private javax.swing.JLabel lblID;
    private javax.swing.JLabel lblLoc;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPhone;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtHour;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtLoc;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPhone;
    // End of variables declaration//GEN-END:variables

    /**
     * Sync counter with existing registrar data
     */
    private void syncCounterWithExistingData() {
        RegistrarDirectory regDir = business.getRegistrarDirectory();
        int maxID = 0;
    
        for (RegistrarProfile rp : regDir.getRegistrarList()) {
            if (rp.getRegistrarId() != null) {
                try {
                    String idStr = rp.getRegistrarId();
                    if (idStr.startsWith("REG")) {
                        idStr = idStr.substring(3);  // Remove "REG"
                    }
                
                    int id = Integer.parseInt(idStr);
                    if (id > maxID) {
                        maxID = id;
                    }
                } catch (NumberFormatException e) {
                    // Ignore
                }
            }
        }
    
        if (maxID > 0) {
            registrarCounter = maxID + 1;
        }
        
    }
    
    /**
     * Generate and display Registrar ID
     * Format: REGxxx (e.g., REG001, REG002, ..., REG999)
     */
    private void generateAndDisplayRegistrarID() {
        String registrarID = String.format("REG%03d", registrarCounter);  // 3位数字
        txtID.setText(registrarID);
    }
    
    /**
     * Validate inputs
     */
    private boolean validateInputs(String name, String email, String phone, String hour) {
        // Validate name
        if (Admin.isEmpty(name)) {
            Admin.showError(this, "Name cannot be empty!");
            txtName.requestFocus();
            return false;
        }
        
        if (!Admin.isValidName(name)) {
            Admin.showError(this, "Invalid name! Must be at least 2 letters.");
            txtName.requestFocus();
            return false;
        }
        
        // Validate email
        if (Admin.isEmpty(email)) {
            Admin.showError(this, "Email cannot be empty!");
            txtEmail.requestFocus();
            return false;
        }
        
        if (!Admin.isValidEmail(email)) {
            Admin.showError(this, "Invalid email format!\nExample: registrar@university.edu");
            txtEmail.requestFocus();
            return false;
        }
        
        // Validate phone
        if (Admin.isEmpty(phone)) {
            Admin.showError(this, "Phone cannot be empty!");
            txtPhone.requestFocus();
            return false;
        }
        
        if (!Admin.isValidPhone(phone)) {
            Admin.showError(this, "Invalid phone number!\nMust be 10 digits.");
            txtPhone.requestFocus();
            return false;
        }
        
        if (!this.isValidTimeFormat(hour)) {
            Admin.showError(this, "Invalid TIME \n\"^(1[0-2]|0?[1-9]):[0-5][0-9](AM|PM)$\") || (\"^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$\"");
            txtPhone.requestFocus();
            return false;
        }
        
        return true;
    }
    
    /**
     * Check if Registrar ID already exists
     */
    private boolean isDuplicateRegistrarID(String registrarID) {
        if (Admin.isEmpty(registrarID)) {
            return false;
        }
        
        RegistrarDirectory regDir = business.getRegistrarDirectory();
        for (RegistrarProfile rp : regDir.getRegistrarList()) {
            if (rp.getRegistrarId() != null && rp.getRegistrarId().equals(registrarID)) {
                return true;
            }
        }
        
        return false;
    }
    
    /**
     * Check if email already exists in system
     */
    private boolean isDuplicateEmail(String email) {
        if (Admin.isEmpty(email)) {
            return false;
        }
        
        String emailLower = email.toLowerCase().trim();
        
        // Check in Students
        StudentDirectory studentDir = business.getStudentDirectory();
        for (Student s : studentDir.getStudentList()) {
            if (s.getEmail() != null && s.getEmail().toLowerCase().equals(emailLower)) {
                return true;
            }
        }
        
        // Check in Faculty
        FacultyDirectory facultyDir = business.getFacultyDirectory();
        for (FacultyProfile fp : facultyDir.getFacultylist()) {
            if (fp.getEmail() != null && fp.getEmail().toLowerCase().equals(emailLower)) {
                return true;
            }
        }
        
        // Check in Registrars
        RegistrarDirectory regDir = business.getRegistrarDirectory();
        for (RegistrarProfile rp : regDir.getRegistrarList()) {
            if (rp.getEmail() != null && rp.getEmail().toLowerCase().equals(emailLower)) {
                return true;
            }
        }
        
        return false;
    }

    /**
     * Reset form
     */
    private void resetForm() {
        txtName.setText("");
        txtEmail.setText("");
        txtPhone.setText("");
        txtHour.setText("");
        txtLoc.setText("");
        
        // Generate new ID
        generateAndDisplayRegistrarID();
        
        txtName.requestFocus();
    }
    
    private boolean isValidTimeFormat(String time) {
        return time.matches("^(1[0-2]|0?[1-9]):[0-5][0-9](AM|PM)$") || time.matches("^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$");
    }
}
