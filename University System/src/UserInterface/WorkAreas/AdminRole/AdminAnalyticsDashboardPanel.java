/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.WorkAreas.AdminRole;

import Business.Business;
import Business.Course.Course;
import Business.Course.CourseDirectory;
import Business.Course.CourseOffering;
import Business.Person.Student;
import Business.Person.StudentDirectory;
import Paymenet.PaymentRecord;
import java.awt.CardLayout;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author bob-h
 */
public class AdminAnalyticsDashboardPanel extends javax.swing.JPanel {

    /**
     * Analytics Dashboard with 4 statistical reports
     * Creates new form AdminAnalyticsDashboardPanel
     */
    private Business business;
    private JPanel cardSequencePanel;
    public AdminAnalyticsDashboardPanel(Business b, JPanel c) {
        this.business = b;
        this.cardSequencePanel = c;
        
        initComponents();
        
        // Load all statistics
        loadAllStatistics();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblRole = new javax.swing.JTable();
        lblRole = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCourse = new javax.swing.JTable();
        lblCourse = new javax.swing.JLabel();
        lblStudent = new javax.swing.JLabel();
        lblSum = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblStudent = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblSum = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();

        tblRole.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Role           ", "Active Users"
            }
        ));
        jScrollPane1.setViewportView(tblRole);

        lblRole.setText("Total active users by role");

        tblCourse.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Semester", "Total Courses"
            }
        ));
        jScrollPane2.setViewportView(tblCourse);

        lblCourse.setText("Total courses offered per semester");

        lblStudent.setText("Total enrolled students per course");

        lblSum.setText("Tuition revenue summary");

        tblStudent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Course ID", "Course Name", "Semester  ", "Enrolled ", "Capacity ", "Full "
            }
        ));
        jScrollPane3.setViewportView(tblStudent);

        tblSum.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Category        ", "Amount      "
            }
        ));
        jScrollPane4.setViewportView(tblSum);

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane3)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblRole)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnBack))
                            .addComponent(lblStudent))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 386, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblSum)
                            .addComponent(lblCourse))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCourse)
                    .addComponent(lblRole)
                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStudent)
                    .addComponent(lblSum))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(42, 42, 42))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        cardSequencePanel.remove(this);
        CardLayout layout = (CardLayout)cardSequencePanel.getLayout();
        layout.previous(cardSequencePanel);
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblCourse;
    private javax.swing.JLabel lblRole;
    private javax.swing.JLabel lblStudent;
    private javax.swing.JLabel lblSum;
    private javax.swing.JTable tblCourse;
    private javax.swing.JTable tblRole;
    private javax.swing.JTable tblStudent;
    private javax.swing.JTable tblSum;
    // End of variables declaration//GEN-END:variables

    /**
     * Load all 4 statistical reports
     */
    private void loadAllStatistics() {
        
        loadUserStatistics();           // Report 1
        loadCourseStatistics();         // Report 2
        loadEnrollmentStatistics();     // Report 3
        loadTuitionStatistics();        // Report 4

    }
    
    /**
     * Load user statistics by role
     * Table: tblRole
     */
    private void loadUserStatistics() {
        DefaultTableModel model = (DefaultTableModel) tblRole.getModel();
        model.setRowCount(0);
        
        // Get counts for each role
        int studentCount = business.getStudentDirectory().getStudentList().size();
        int facultyCount = business.getFacultyDirectory().getFacultylist().size();
        int adminCount = business.getAdminDirectory().getAdminCount();
        int registrarCount = business.getRegistrarDirectory().getRegistrarList().size();
        
        // Add rows
        model.addRow(new Object[]{"Students", studentCount});
        model.addRow(new Object[]{"Faculty", facultyCount});
        model.addRow(new Object[]{"Admins", adminCount});
        model.addRow(new Object[]{"Registrars", registrarCount});
        
    }
    
    /**
     * Load course statistics by semester
     * Table: tblCourse
     */
    private void loadCourseStatistics() {
        DefaultTableModel model = (DefaultTableModel) tblCourse.getModel();
        model.setRowCount(0);
        
        // Count courses per semester
        Map<String, Integer> semesterCourseCount = new HashMap<>();
        
        CourseDirectory courseDir = business.getCourseDirectory();
        for (CourseOffering offering : courseDir.getCourseOfferingList()) {
            String semester = offering.getSemester();
            if (semester != null) {
                semesterCourseCount.put(semester, semesterCourseCount.getOrDefault(semester, 0) + 1);
            }
        }
        
        // Add rows to table
        for (Map.Entry<String, Integer> entry : semesterCourseCount.entrySet()) {
            model.addRow(new Object[]{entry.getKey(), entry.getValue()});
        }
        
    }
    
    /**
     * Load enrollment statistics per course
     * Table: tblStudent
     */
    private void loadEnrollmentStatistics() {
        DefaultTableModel model = (DefaultTableModel) tblStudent.getModel();
        model.setRowCount(0);
        
        CourseDirectory courseDir = business.getCourseDirectory();
        StudentDirectory studentDir = business.getStudentDirectory();
        
        for (CourseOffering offering : courseDir.getCourseOfferingList()) {
            Course course = offering.getCourse();
            String courseID = course.getCourseId();
            String courseName = course.getName();
            String semester = offering.getSemester();
            int capacity = offering.getCapacity();
            
            // Count enrolled students for this specific offering
            int enrolled = countEnrolledStudents(offering);
            
            // Calculate percentage full
            double percentFull = (capacity > 0) ? (enrolled * 100.0) / capacity : 0.0;
            String percentStr = String.format("%.1f%%", percentFull);
            
            // Add row
            Object[] row = new Object[]{
                courseID,
                courseName,
                semester,
                enrolled,
                capacity,
                percentStr
            };
            
            model.addRow(row);
        }
        
    }
    
    /**
     * Count enrolled students for a specific course offering
     */
    private int countEnrolledStudents(CourseOffering targetOffering) {
        int count = 0;
        
        StudentDirectory studentDir = business.getStudentDirectory();
        String targetCourseID = targetOffering.getCourse().getCourseId();
        String targetSemester = targetOffering.getSemester();
        
        for (Student student : studentDir.getStudentList()) {
            for (CourseOffering offering : student.getEnrolledOfferings()) {
                // Match by Course ID and Semester
                if (offering.getCourse().getCourseId().equals(targetCourseID) &&
                    offering.getSemester().equals(targetSemester)) {
                    count++;
                    break;  // Each student counted once per course
                }
            }
        }
        
        return count;
    }
    
    /**
     * Load tuition revenue statistics
     * Table: tblSum
     */
    private void loadTuitionStatistics() {
        DefaultTableModel model = (DefaultTableModel) tblSum.getModel();
        model.setRowCount(0);
        
        double totalPaid = 0.0;
        double totalUnpaid = 0.0;
        double totalCharged = 0.0;
        
        StudentDirectory studentDir = business.getStudentDirectory();
        
        for (Student student : studentDir.getStudentList()) {
            // Current balance is unpaid amount
            totalUnpaid += student.getBalance();
            
            // Sum up payment records
            for (PaymentRecord pr : student.getPayments()) {
                if ("PAID".equals(pr.getStatus())) {
                    totalPaid += pr.getAmout();  // Note: getAmout() not getAmount()
                } 
                else if ("CHARGED".equals(pr.getStatus())) {
                    totalCharged += pr.getAmout();
                }
            }
        }
        
        // Total revenue = all charged tuition
        double totalRevenue = totalPaid + totalUnpaid;
        
        // Add rows to table
        model.addRow(new Object[]{"Total Tuition Revenue", String.format("$%.2f", totalRevenue)});
        model.addRow(new Object[]{"Total Paid", String.format("$%.2f", totalPaid)});
        model.addRow(new Object[]{"Total Unpaid/Balance", String.format("$%.2f", totalUnpaid)});
    }
}
