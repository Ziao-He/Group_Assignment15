/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.WorkAreas.AdminRole;

import Business.Business;
import Business.Person.Admin;
import Business.Person.Student;
import Business.Person.StudentDirectory;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 * 
 * @author bob-h
 * Admin panel for managing students
 * Implements 3 search methods and CRUD operations
 */
public class AdminManageStudentsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form Admin
     */
    private Business business;
    private JPanel cardSequencePanel;
    private Student selectedStudent;
    public AdminManageStudentsJPanel(Business b, JPanel c) {
        this.business = b;
        this.cardSequencePanel = c;
        initComponents();
        
        loadAllStudents();
        
        setDetailFieldsEditable(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblStudent = new javax.swing.JTable();
        lblSearchName = new javax.swing.JLabel();
        txtSearchName = new javax.swing.JTextField();
        lblSearchID = new javax.swing.JLabel();
        txtSearchID = new javax.swing.JTextField();
        lblSearchDepartment = new javax.swing.JLabel();
        txtSearchDepartment = new javax.swing.JTextField();
        btnSearchName = new javax.swing.JButton();
        btnSearchID = new javax.swing.JButton();
        btnSearchDepartment = new javax.swing.JButton();
        lblEmail = new javax.swing.JLabel();
        lblPhone = new javax.swing.JLabel();
        lblBalance = new javax.swing.JLabel();
        txtID = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtPhone = new javax.swing.JTextField();
        txtBalance = new javax.swing.JTextField();
        lblName = new javax.swing.JLabel();
        lblID = new javax.swing.JLabel();
        lblDepartment = new javax.swing.JLabel();
        txtDepartment = new javax.swing.JTextField();
        btnView = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();

        tblStudent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Name", "Email", "Phone", "Balance", "Student ID"
            }
        ));
        jScrollPane1.setViewportView(tblStudent);

        lblSearchName.setText("Search by Name:");

        txtSearchName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchNameActionPerformed(evt);
            }
        });

        lblSearchID.setText("Search by ID:");

        lblSearchDepartment.setText("Search by Department:");

        btnSearchName.setText("Search");
        btnSearchName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchNameActionPerformed(evt);
            }
        });

        btnSearchID.setText("Search");
        btnSearchID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchIDActionPerformed(evt);
            }
        });

        btnSearchDepartment.setText("Search");
        btnSearchDepartment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchDepartmentActionPerformed(evt);
            }
        });

        lblEmail.setText("Email:");

        lblPhone.setText("Phone:");

        lblBalance.setText("Balance:");

        lblName.setText("Name:");

        lblID.setText("StudentID:");

        lblDepartment.setText("Department:");

        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnBack.setText(">> Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 705, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblSearchName)
                                    .addComponent(lblSearchID))
                                .addGap(68, 68, 68)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtSearchID, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                                    .addComponent(txtSearchName)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblSearchDepartment)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                                .addComponent(txtSearchDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(65, 65, 65)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblName)
                                    .addComponent(lblID)
                                    .addComponent(lblEmail)
                                    .addComponent(lblPhone)
                                    .addComponent(lblBalance)
                                    .addComponent(lblDepartment))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnSearchID)
                                    .addComponent(btnSearchDepartment))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSearchName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnBack))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnView)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEdit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDelete)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSearchName)
                    .addComponent(txtSearchName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchName)
                    .addComponent(btnBack))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSearchID)
                    .addComponent(txtSearchID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchID))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearchDepartment)
                    .addComponent(txtSearchDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSearchDepartment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblID)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmail)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPhone)
                    .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBalance)
                    .addComponent(txtBalance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDepartment)
                    .addComponent(txtDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDelete)
                    .addComponent(btnView)
                    .addComponent(btnEdit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchNameActionPerformed
        // TODO add your handling code here:
        String searchTerm = txtSearchName.getText().trim();
        
        if (Admin.isEmpty(searchTerm)) {
            Admin.showWarning(this, "Please enter a name to search!");
            return;
        }
        
        List<Student> results = searchStudentsByName(searchTerm);
        populateTable(results);
        
        if (results.isEmpty()) {
            Admin.showInfo(this, "No students found with name: " + searchTerm);
        }
    }//GEN-LAST:event_btnSearchNameActionPerformed

    private void btnSearchIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchIDActionPerformed
        // TODO add your handling code here:
        String searchTerm = txtSearchID.getText().trim();
        
        if (Admin.isEmpty(searchTerm)) {
            Admin.showWarning(this, "Please enter an ID to search!");
            return;
        }
        
        List<Student> results = searchStudentsByID(searchTerm);
        populateTable(results);
        
        if (results.isEmpty()) {
            Admin.showInfo(this, "No students found with ID: " + searchTerm);
        }
    }//GEN-LAST:event_btnSearchIDActionPerformed

    private void btnSearchDepartmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchDepartmentActionPerformed
        // TODO add your handling code here:
        String searchTerm = txtSearchDepartment.getText().trim();
        
        if (Admin.isEmpty(searchTerm)) {
            Admin.showWarning(this, "Please enter a department to search!");
            return;
        }
        
        List<Student> results = searchStudentsByDepartment(searchTerm);
        populateTable(results);
        
        if (results.isEmpty()) {
            Admin.showInfo(this, "No students found in department: " + searchTerm);
        }
    }//GEN-LAST:event_btnSearchDepartmentActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        Student student = getSelectedStudent();
        
        if (student == null) {
            Admin.showWarning(this, "Please select a student from the table first!");
            return;
        }
        
        // Display in detail fields
        displayStudentDetails(student);
        
        // Also show info dialog
        Admin.showInfo(this, "Details are shown.");
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
        if (btnEdit.getText().equals("Edit")) {
            // Enter edit mode
            Student student = getSelectedStudent();
            
            if (student == null) {
                Admin.showWarning(this, "Please select a student from the table first!");
                return;
            }
            
            displayStudentDetails(student);
            setDetailFieldsEditable(true);
            btnEdit.setText("Save");
            btnView.setEnabled(false);
            btnDelete.setEnabled(false);
            
            System.out.println("✏️ Edit mode for: " + student.getStudentId());
        } 
        else {
            // Save mode
            if (saveStudentChanges()) {
                setDetailFieldsEditable(false);
                btnEdit.setText("Edit");
                btnView.setEnabled(true);
                btnDelete.setEnabled(true);
                loadAllStudents();
                Admin.showSuccess(this, "Student updated successfully!");
            }
        }
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        Student student = getSelectedStudent();
        
        if (student == null) {
            Admin.showWarning(this, "Please select a student from the table first!");
            return;
        }
        
        // Confirmation
        String msg = "Delete this student?";
        
        if (!Admin.showConfirmation(this, msg)) {
            return;
        }
        
        try {
            StudentDirectory studentDir = business.getStudentDirectory();
            studentDir.getStudentList().remove(student);
            
            Admin.showSuccess(this, "Student deleted successfully!");
            clearDetailFields();
            loadAllStudents();
            
        } catch (Exception e) {
            Admin.showError(this, "Error: " + e.getMessage());
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void txtSearchNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchNameActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        cardSequencePanel.remove(this);
        CardLayout layout = (CardLayout)cardSequencePanel.getLayout();
        layout.previous(cardSequencePanel);
    }//GEN-LAST:event_btnBackActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnSearchDepartment;
    private javax.swing.JButton btnSearchID;
    private javax.swing.JButton btnSearchName;
    private javax.swing.JButton btnView;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBalance;
    private javax.swing.JLabel lblDepartment;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblID;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPhone;
    private javax.swing.JLabel lblSearchDepartment;
    private javax.swing.JLabel lblSearchID;
    private javax.swing.JLabel lblSearchName;
    private javax.swing.JTable tblStudent;
    private javax.swing.JTextField txtBalance;
    private javax.swing.JTextField txtDepartment;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JTextField txtSearchDepartment;
    private javax.swing.JTextField txtSearchID;
    private javax.swing.JTextField txtSearchName;
    // End of variables declaration//GEN-END:variables

    /**
     * Load all students into the table
     */
    private void loadAllStudents() {
        StudentDirectory studentDir = business.getStudentDirectory();
        List<Student> allStudents = studentDir.getStudentList();
        populateTable(allStudents);
    }
    
    /**
     * Populate JTable with student list
     */
    private void populateTable(List<Student> students) {
        DefaultTableModel model = (DefaultTableModel) tblStudent.getModel();
        model.setRowCount(0);  // Clear existing rows
        
        for (Student student : students) {
            Object[] row = new Object[5];
            row[0] = student.getName();
            row[1] = getStudentEmail(student);
            row[2] = getStudentPhone(student);
            row[3] = student.getBalance();
            row[4] = student.getStudentId();
            
            model.addRow(row);
        }
    }
    
    /**
     * Get selected student from table
     * Returns null if no row selected
     */
    private Student getSelectedStudent() {
        int selectedRow = tblStudent.getSelectedRow();
        
        if (selectedRow < 0) {
            return null;
        }
        
        // Get student ID from selected row (column 4)
        String studentID = (String) tblStudent.getValueAt(selectedRow, 4);
        
        // Find student by ID
        return findStudentByID(studentID);
    }
    
    /**
     * Display student details in the detail fields
     */
    private void displayStudentDetails(Student student) {
        if (student == null) {
            clearDetailFields();
            return;
        }
        
        txtName.setText(student.getName());
        txtID.setText(student.getStudentId());
        txtEmail.setText(getStudentEmail(student));
        txtPhone.setText(getStudentPhone(student));
        txtBalance.setText(String.valueOf(student.getBalance()));
        txtDepartment.setText(getStudentDepartment(student));
    }
    
    /**
     * Clear detail fields
     */
    private void clearDetailFields() {
        txtName.setText("");
        txtID.setText("");
        txtEmail.setText("");
        txtPhone.setText("");
        txtBalance.setText("");
        txtDepartment.setText("");
    }
    
    /**
     * Set detail fields editable or not
     */
    private void setDetailFieldsEditable(boolean editable) {
        txtName.setEditable(editable);
        txtEmail.setEditable(editable);
        txtPhone.setEditable(editable);
        txtDepartment.setEditable(editable);
        
        // ID and Balance are never editable
        txtID.setEditable(false);
        txtBalance.setEditable(false);
        
        if (!editable) {
            txtName.setBackground(new java.awt.Color(240, 240, 240));
            txtEmail.setBackground(new java.awt.Color(240, 240, 240));
            txtPhone.setBackground(new java.awt.Color(240, 240, 240));
            txtDepartment.setBackground(new java.awt.Color(240, 240, 240));
        } else {
            txtName.setBackground(java.awt.Color.WHITE);
            txtEmail.setBackground(java.awt.Color.WHITE);
            txtPhone.setBackground(java.awt.Color.WHITE);
            txtDepartment.setBackground(java.awt.Color.WHITE);
        }
    }
    
    /**
     * Find student by ID
     */
    private Student findStudentByID(String studentID) {
        StudentDirectory studentDir = business.getStudentDirectory();
        for (Student student : studentDir.getStudentList()) {
            if (student.getStudentId().equals(studentID)) {
                return student;
            }
        }
        return null;
    }
    
    /**
     * Get student email (handles null)
     */
    private String getStudentEmail(Student student) {
        return student.getEmail() != null ? student.getEmail() : "";
    }
    
    /**
     * Get student phone (handles null)
     */
    private String getStudentPhone(Student student) {
        return student.getPhone() != null ? student.getPhone() : "";
    }
    
    /**
     * Get student department (handles null)
     */
    private String getStudentDepartment(Student student) {
        return student.getDepartment() != null ? student.getDepartment() : "";
    }
    
    /**
     * Set student email using reflection
     */
    private void setStudentEmail(Student student, String email) {
        student.setEmail(email);
    }
    
    /**
     * Set student phone using reflection
     */
    private void setStudentPhone(Student student, String phone) {
        student.setPhone(phone);
    }
    
    /**
     * SEARCH METHOD 1: Search students by name
     */
    private List<Student> searchStudentsByName(String name) {
        List<Student> results = new ArrayList<>();
        if (Admin.isEmpty(name)) return results;
        
        String searchTerm = name.toLowerCase().trim();
        StudentDirectory studentDir = business.getStudentDirectory();
        
        for (Student student : studentDir.getStudentList()) {
            if (student.getName().toLowerCase().contains(searchTerm)) {
                results.add(student);
            }
        }
        
        return results;
    }
    
    /**
     * SEARCH METHOD 2: Search students by ID
     */
    private List<Student> searchStudentsByID(String id) {
        List<Student> results = new ArrayList<>();
        if (Admin.isEmpty(id)) return results;
        
        String searchTerm = id.trim();
        StudentDirectory studentDir = business.getStudentDirectory();
        
        for (Student student : studentDir.getStudentList()) {
            if (student.getStudentId().contains(searchTerm)) {
                results.add(student);
            }
        }
        
        return results;
    }
    
    /**
     * SEARCH METHOD 3: Search students by department
     */
    private List<Student> searchStudentsByDepartment(String department) {
        List<Student> results = new ArrayList<>();
        if (Admin.isEmpty(department)) return results;
        
        String searchTerm = department.toLowerCase().trim();
        StudentDirectory studentDir = business.getStudentDirectory();
        
        for (Student student : studentDir.getStudentList()) {
            String studentDept = getStudentDepartment(student).toLowerCase();
            if (studentDept.contains(searchTerm)) {
                results.add(student);
            }
        }
        
        return results;
    }
    
    /**
     * Save student changes
     */
    private boolean saveStudentChanges() {
        Student student = getSelectedStudent();
        
        if (student == null) {
            Admin.showError(this, "No student selected!");
            return false;
        }
        
        String newName = txtName.getText().trim();
        String newEmail = txtEmail.getText().trim();
        String newPhone = txtPhone.getText().trim();
        String newDepartment = txtDepartment.getText().trim();
        
        // Validate
        if (!Admin.isValidName(newName)) {
            Admin.showError(this, "Invalid name format!");
            return false;
        }
        
        if (!Admin.isValidEmail(newEmail)) {
            Admin.showError(this, "Invalid email format!");
            return false;
        }
        
        if (!Admin.isValidPhone(newPhone)) {
            Admin.showError(this, "Invalid phone number!");
            return false;
        }
        
        // Check email conflict
        if (!newEmail.equalsIgnoreCase(getStudentEmail(student))) {
            if (isEmailUsedByOther(newEmail, student.getStudentId())) {
                Admin.showError(this, "Email already used by another student!");
                return false;
            }
        }
        
        try {
            student.setName(newName);
            setStudentEmail(student, newEmail);
            setStudentPhone(student, newPhone);
            student.setDepartment(newDepartment);
            
            return true;
        } catch (Exception e) {
            Admin.showError(this, "Error: " + e.getMessage());
            return false;
        }
    }
    
    /**
     * Check if email is used by another student
     */
    private boolean isEmailUsedByOther(String email, String currentStudentID) {
        if (Admin.isEmpty(email)) return false;
        
        String emailLower = email.toLowerCase();
        for (Student s : business.getStudentDirectory().getStudentList()) {
            if (!s.getStudentId().equals(currentStudentID)) {
                if (getStudentEmail(s).toLowerCase().equals(emailLower)) {
                    return true;
                }
            }
        }
        return false;
    }
}
